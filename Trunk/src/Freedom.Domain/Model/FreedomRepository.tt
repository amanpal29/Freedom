<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)/Freedom.DomainGenerator/Freedom.DomainGenerator/bin/$(Configuration)/Freedom.DomainGenerator.Dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Freedom.DomainGenerator" #>
<#@ import namespace="Freedom.DomainGenerator.DomainDefinitionModel" #>
<#@ import namespace="Freedom.DomainGenerator.TextTemplate" #>
<#

	Domain domain = DomainBuilder.Load(Host.ResolvePath(@"Definition\FreedomDomain.xml"));

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using Freedom.Domain.Exceptions;
using Freedom.Domain.Services.Time;

namespace Freedom.Domain.Model
{
	public partial class FreedomRepository : IDisposable
	{
		private readonly ITimeService _timeService = IoC.TryGet<ITimeService>() ?? new LocalTimeService();

		private readonly FreedomLocalContext _db;
		private readonly Guid _currentUserId;
		private readonly DateTime _modifyDateTime;
		private bool _disposed;

		public FreedomRepository(FreedomLocalContext db, Guid currentUserId)
			: this(db, currentUserId, default(DateTime))
		{
		}

		public FreedomRepository(FreedomLocalContext db, Guid currentUserId, DateTime modifyDateTime)
		{
			_db = db;
			_currentUserId = currentUserId;
			_modifyDateTime = modifyDateTime > default(DateTime) ? modifyDateTime : _timeService.UtcNow;
		}

		public FreedomLocalContext Context
		{
			get { return _db; }
		}

		public void DetectChanges()
		{
			_db.ChangeTracker.DetectChanges();
		}

		public Task<int> SaveChangesAsync()
		{
			_db.ChangeTracker.DetectChanges();

			_db.UpdateAuditProperties(_currentUserId, _modifyDateTime);

			return _db.SaveChangesAsync();
		}
	
		// Explicitally updates the AuditProperties of a given AggregateRoot entity
		public void UpdateAuditProperties(AggregateRoot entity, EntityState state = EntityState.Modified)
		{
			if (state.HasFlag(EntityState.Added))
			{
				entity.CreatedBy = null;
				entity.CreatedById = _currentUserId;
				entity.CreatedDateTime = _modifyDateTime;
			}

			if (!state.HasFlag(EntityState.Unchanged))
			{
				if(entity.ModifiedById != _currentUserId)
					entity.ModifiedBy = null;

				entity.ModifiedById = _currentUserId;
				entity.ModifiedDateTime = _modifyDateTime;
			}
		}

		#region Get Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && et.IsAggregateRoot))
		{
#>
		public async Task<<#= entityType.Name #>> Get<#= entityType.Name #>Async(Guid id)
		{
<#
			if (entityType.Relationships.All(r => r.RelationshipType != RelationshipType.Children))
			{
#>
			return await _db.<#= entityType.Name #>.SingleOrDefaultAsync(x => x.Id == id);
<#
			}
			else
			{
#>
			IQueryable<<#= entityType.Name #>> baseQuery = _db.<#= entityType.Name #>.Where(x => x.Id == id);

			<#= entityType.Name #> result = await baseQuery.SingleOrDefaultAsync();

			await LoadChildrenAsync(baseQuery);

			return result;
<#
			}
#>
		}

<#
		}
#>
		#endregion

		#region LoadChildren Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && et.IsAggregateRoot))
		{
			if (entityType.Relationships.All(r => r.RelationshipType != RelationshipType.Children))
				continue;
#>
		public async Task LoadChildrenAsync(IQueryable<<#= entityType.Name #>> entities)
		{
<#
			foreach (string loadCommand in BuildLoadCommand("entities", entityType, true))
			{
#>
			<#= loadCommand #>
<#
			}
#>
		}

<#
		}
#>
		#endregion

		#region Add Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && et.IsAggregateRoot))
		{
#>
		public <#= entityType.Name #> Add(<#= entityType.Name #> item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			<#= entityType.Name #> entity = new <#= entityType.Name #>();

			entity.Copy(item);
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.Children))
			{
				if (relationship.RelatedEntityType.IsManyToManyIntermediate) continue;
#>

			foreach (<#= relationship.RelatedType #> child in item.<#= relationship.Name #>)
				Add(entity.<#= relationship.Name #>, child);
<#
			}
#>
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.ManyToMany))
			{
#>

			foreach (Guid id in item.<#= relationship.RelatedType #>Ids)
				_db.<#= relationship.Intermediate #>.Add(new <#= relationship.Intermediate #>(entity.Id, id));
<#
			}
#>

			_db.<#= entityType.Name #>.Add(entity);

			return entity;
		}

<#
		}

		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && !et.IsAggregateRoot))
		{
#>
		private static void Add(ICollection<<#= entityType.Name #>> collection, <#= entityType.Name #> item)
		{
			if (item == collection)
				throw new ArgumentNullException("collection");

			if (item == null)
				throw new ArgumentNullException("item");

			<#= entityType.Name #> entity = new <#= entityType.Name #>();

			entity.Copy(item);
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.Children))
			{
				if (relationship.RelatedEntityType.IsManyToManyIntermediate) continue;
#>

			foreach (<#= relationship.RelatedType #> child in item.<#= relationship.Name #>)
				Add(entity.<#= relationship.Name #>, child);
<#
			}
#>
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.ManyToMany))
			{
#>

			foreach (Guid id in item.<#= relationship.RelatedType #>Ids)
				entity.<#= relationship.Intermediate #>.Add(new <#= relationship.Intermediate #>(entity.Id, id));
<#
			}
#>

			collection.Add(entity);
		}

<#
		}
#>
		#endregion

		#region Update Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && et.IsAggregateRoot))
		{
#>
		public async Task UpdateAsync(<#= entityType.Name #> item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			IQueryable<<#= entityType.Name #>> baseQuery = _db.<#= entityType.Name #>.Where(x => x.Id == item.Id);

			<#= entityType.Name #> existingItem = await baseQuery.FirstOrDefaultAsync();

			if (existingItem == null)
				throw new ConcurrencyException(ConcurrencyExceptionCode.ItemNotFound);

<#
			if (entityType.Relationships.Any(r => r.RelationshipType == RelationshipType.Children))
			{
#>
			await LoadChildrenAsync(baseQuery);

<#
			}
#>
			existingItem.Copy(item);

<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.Children))
			{
				if (relationship.RelatedEntityType.IsManyToManyIntermediate) continue;

#>
			UpdateChildren(existingItem.<#= relationship.Name #>, item.<#= relationship.Name #>);
<#
			}
#>
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.ManyToMany))
			{
#>
			UpdateIntermediate(existingItem.<#= relationship.Intermediate #>, item.Id, item.<#= relationship.RelatedType #>Ids);
<#
			}
#>
<#
			if (entityType.IsType("AggregateRoot"))
			{
#>

			UpdateAuditProperties(existingItem, EntityState.Modified);
<#
			}
#>
		}

<#
		} // foreach entity
#>
		#endregion

		#region Child Collection Update Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && !et.IsAggregateRoot && !et.IsManyToManyIntermediate))
		{
			List<string> primaryKey = entityType.GetFlattenedProperties().Where(p => p.IsPrimaryKey).Select(p => p.Name).ToList();
#>
		private void UpdateChildren(ICollection<<#= entityType.Name #>> target, ICollection<<#= entityType.Name #>> source)
		{
			if (target == null)
				throw new ArgumentNullException("target");

			if (source == null)
				throw new ArgumentNullException("source");

			List<<#= entityType.Name #>> itemsToDelete = target.ToList();

			foreach(<#= entityType.Name #> item in source)
			{
				<#= entityType.Name #> existingItem = itemsToDelete.SingleOrDefault(p => <#= string.Join(" && ", primaryKey.Select(x => string.Format("p.{0} == item.{0}", x))) #>);

				if (existingItem != null)
				{
					itemsToDelete.Remove(existingItem);

					existingItem.Copy(item);
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.Children))
			{
				if (relationship.RelatedEntityType.IsManyToManyIntermediate) continue;
#>
					UpdateChildren(existingItem.<#= relationship.Name #>, item.<#= relationship.Name #>);
<#
			}
#>
<#
			foreach (Relationship relationship in entityType.Relationships.Where(r => r.RelationshipType == RelationshipType.ManyToMany))
			{
#>
					UpdateIntermediate(existingItem.<#= relationship.Intermediate #>, item.Id, item.<#= relationship.RelatedType #>Ids);
<#
			}
#>
				}
				else
				{
					Add(target, item);
				}
			}

			foreach(<#= entityType.Name #> item in itemsToDelete)
			{
				_db.<#= entityType.Name #>.Remove(item);
			}
		}

<#
		} // foreach entity
#>
<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && !et.IsAggregateRoot && et.IsManyToManyIntermediate))
		{
			Relationship parent = entityType.Relationships.SingleOrDefault(r => r.RelationshipType == RelationshipType.Parent);
			Relationship required = entityType.Relationships.SingleOrDefault(r => r.RelationshipType == RelationshipType.Required);
#>
		private void UpdateIntermediate(ICollection<<#= entityType.Name #>> target, Guid parentId, ICollection<Guid> keys)
		{
			if (target == null)
				throw new ArgumentNullException("target");

			if (keys == null)
				throw new ArgumentNullException("keys");

			List<<#= entityType.Name #>> itemsToRemove = target.ToList();

			foreach (Guid key in keys)
			{
				if (itemsToRemove.RemoveAll(x => x.<#= required.RelatedType #>Id == key) > 0)
					continue;

				target.Add(new <#= entityType.Name #>(parentId, key));
			}

			foreach (<#= entityType.Name #> item in itemsToRemove)
			{
				_db.<#= entityType.Name #>.Remove(item);
			}
		}

<#
		} // foreach entity
#>
		#endregion

		#region Delete Methods

<#
		foreach (EntityType entityType in domain.EntityTypes.Where(et => !et.Abstract && et.IsAggregateRoot))
		{
#>
		public async Task<bool> Delete<#= entityType.Name #>Async(Guid id)
		{
			<#= entityType.Name #> existingItem = await _db.<#= entityType.Name #>.FindAsync(id);

			if (existingItem == null) return false;

			_db.<#= entityType.Name #>.Remove(existingItem);

			return true;
		}

<#
		}
#>
		#endregion

		#region Implementation of IDisposable

		public void Dispose()
		{
			Dispose(true);

			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing && !_disposed)
			{
				_disposed = true;
				_db.Dispose();
			}
		}

		#endregion
	}
}

<#+

public IEnumerable<string> BuildLoadCommand(string baseQueryable, EntityType type, bool async)
{
	foreach (Relationship relationship in type.Relationships.Where(r => r.RelationshipType == RelationshipType.Children))
	{
		string queryable = string.Format("{0}.SelectMany(x => x.{1})", baseQueryable, relationship.Name);

		if (async)
			yield return "await " + queryable + ".LoadAsync();";
		else
			yield return queryable + ".Load();";

		foreach (string child in BuildLoadCommand(queryable, relationship.RelatedEntityType, async))
			yield return child;
	}
}

#>