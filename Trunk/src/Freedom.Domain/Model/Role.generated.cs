//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Domain.Infrastructure;
using Freedom.Domain.Services.Repository;
using Freedom.Collections;
using Freedom.ComponentModel;

namespace Freedom.Domain.Model
{
	[DataContract(Namespace = Namespace)]
	[Reportable(false)]

	public partial class Role : AggregateRoot
	{
		public static readonly ResolutionGraph DefaultResolutionGraph = new ResolutionGraph(
			Paths.Role.Permissions
		);

		public override string EntityTypeName
		{
			get { return "Role"; }
		}

		[DataMember(EmitDefaultValue = false)]
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name == value) return;
				_name = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _name;

		[DataMember(EmitDefaultValue = false)]
		public override User CreatedBy
		{
			get { return _createdBy; }
			set
			{
				if (object.ReferenceEquals(_createdBy, value)) return;

				_createdBy = value;

				if (value != null)
					CreatedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _createdBy;

		[DataMember(EmitDefaultValue = false)]
		public override User ModifiedBy
		{
			get { return _modifiedBy; }
			set
			{
				if (object.ReferenceEquals(_modifiedBy, value)) return;

				_modifiedBy = value;

				if (value != null)
					ModifiedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _modifiedBy;

		[DataMember(EmitDefaultValue = false)]
		public virtual IList<Permission> Permissions
		{
			get
			{
				if (!IsSerializing && _permissions == null)
				{
					_permissions = new EntityCollection<Permission>();
					_permissions.CollectionChanged += (s, a) => MarkAsChanged();
				}

				return _permissions;
			}
			set
			{
				if (!object.ReferenceEquals(_permissions, value))
				{
					if (value != null)
					{
						if (_permissions == null)
						{
							_permissions = new EntityCollection<Permission>(value);
							_permissions.CollectionChanged += (s, a) => MarkAsChanged();
						}
						else
						{
							_permissions.Clear();
							_permissions.AddRange(value);
						}
					}
					else if (_permissions != null)
					{
						_permissions.Clear();
					}

					MarkAsChanged();
					OnPropertyChanged();
				}
			}
		}
		private EntityCollection<Permission> _permissions;

		public override void Copy(Entity entity)
		{
			base.Copy(entity);

			Role source = entity as Role;

			if (source == null)
				throw new ArgumentException("entity", "entity must be an instance of Role.");

			Name = source._name;
		}
	}
}
