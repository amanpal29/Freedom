<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)/Freedom.DomainGenerator/Freedom.DomainGenerator/bin/$(Configuration)/Freedom.DomainGenerator.Dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Freedom.DomainGenerator" #>
<#@ import namespace="Freedom.DomainGenerator.DomainDefinitionModel" #>
<#@ import namespace="Freedom.DomainGenerator.TextTemplate" #>
<#

	TemplateFileManager fileManager = TemplateFileManager.Create(this);

	Domain domain = DomainBuilder.Load(Host.ResolvePath(@"Definition\FreedomDomain.xml"));

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Annotations;

namespace Freedom.Domain.Model
{
	[DataContract(IsReference = true, Namespace = Namespace)]
	public abstract partial class ComplexBase : INotifyPropertyChanged
	{
		public const string Namespace = Entity.Namespace;

		#region Implementation of INotifyPropertyChanged

		public event PropertyChangedEventHandler PropertyChanged;

		[NotifyPropertyChangedInvocator]
		public void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
		    OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}

		protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
		{
			if (args == null)
				throw new ArgumentNullException("args");

			PropertyChangedEventHandler propertyChangedHandler = PropertyChanged;

			if (propertyChangedHandler != null)
			{
				propertyChangedHandler(this, args);
			}
		}

		#endregion
	}
}
<#
	foreach(ComplexType complexType in domain.ComplexTypes)
	{
		fileManager.StartNewFile(complexType.Name + ".generated.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Annotations;

namespace Freedom.Domain.Model
{
	[DataContract(IsReference = true, Namespace = Namespace)]
	public partial class <#= complexType.Name #> : ComplexBase
	{
<#
		foreach(Property property in complexType.Properties)
		{
#>
		[DataMember(EmitDefaultValue = false)]
		public <#= property.ClrType #> <#= property.Name #>
		{
			get { return <#= property.FieldName #>; }
			set
			{
				if (<#= property.FieldName #> != value)
				{
					<#= property.FieldName #> = value;
					OnPropertyChanged();
				}
			}
		}
		private <#= property.ClrType #> <#= property.FieldName #>;

<#
		}
#>
	}
}
<#
	}
		
	fileManager.Process();
#>