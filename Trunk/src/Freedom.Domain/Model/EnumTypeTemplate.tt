<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)/Freedom.DomainGenerator/Freedom.DomainGenerator/bin/$(Configuration)/Freedom.DomainGenerator.Dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Freedom.DomainGenerator" #>
<#@ import namespace="Freedom.DomainGenerator.DomainDefinitionModel" #>
<#@ import namespace="Freedom.DomainGenerator.TextTemplate" #>
<#
	TemplateFileManager fileManager = TemplateFileManager.Create(this);

	Domain domain = DomainBuilder.Load(Host.ResolvePath(@"Definition\FreedomDomain.xml"));

	foreach (EnumType enumType in domain.EnumTypes)
	{
		fileManager.StartNewFile(enumType.Name + ".generated.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace Freedom.Domain.Model
{
<#
		if (enumType.IsFlags)
		{
#>
	[Flags]
<#
		}
#>
	[DataContract(Namespace = Entity.Namespace)]
	public enum <#= enumType.Name #> : int
	{
<#
		foreach (EnumMember member in enumType.Members)
		{
#>
		[EnumMember]
<#
			if (member.Browsable == false)
			{
#>
		[Browsable(false)]
<#
			}
#>
<#
			if (member.Description != null)
			{
#>
		[Description("<#= member.Description #>")]
<#
			}
#>
		<#= member.Name #> = <#= enumType.IsFlags ? member.ValueAsHex : member.Value #>,

<#
		}
#>
	}
}

<#
	}

	fileManager.Process();
#>