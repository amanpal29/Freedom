<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)/Freedom.DomainGenerator/Freedom.DomainGenerator/bin/$(Configuration)/Freedom.DomainGenerator.Dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Freedom.DomainGenerator" #>
<#@ import namespace="Freedom.DomainGenerator.DomainDefinitionModel" #>
<#@ import namespace="Freedom.DomainGenerator.TextTemplate" #>
<#

	Domain domain = DomainBuilder.Load(Host.ResolvePath(@"Definition\FreedomDomain.xml"));

	IEnumerable<Association> associations = domain.Associations.Where(a => !a.IsSelfJoin);

	List<string> tables = new List<string>();
	List<string> listOfTablesToExclude = new List<string>()
	{
		"Permission",
		"Transaction",
		"Invoice",
		"AccountContact",
		"DraftNote"
	};

	List<EntityType> allEntities = domain.EntityTypes
		.Where(e => !e.Abstract && e.Audit && !e.Name.EndsWith("Confidential") && !listOfTablesToExclude.Contains(e.Name))
		.OrderBy(e => e.Name)
		.ToList();

	bool continueLooping = true;

	while (continueLooping)
	{
		continueLooping = false;

		foreach (EntityType entityType in allEntities)
		{
			if (tables.Contains(entityType.Name)) continue;

			if (associations.Where(a => a.DependentType == entityType.Name).All(a => tables.Contains(a.PrincipalType)))
			{
				tables.Add(entityType.Name);
				continueLooping = true;
			}
		}
	}

	if (tables.Count != allEntities.Count)
	{
		string sb = "The order so far is: ";

		foreach (string tableName in tables)
			sb += string.Format("{0},", tableName);

		throw new InvalidOperationException("ERROR: Circular foreign key dependencies detected. " + sb);
	}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace Freedom.Domain.Model
{
	public static class Tables
	{
		public static IEnumerable<string> SyncOrder
		{
			get
			{
<#
	foreach(string tableName in tables)
	{
#>
				yield return "<#= tableName #>";
<#
	}
#>
			}
		}
	}
}
