//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Annotations;
using Freedom.FullTextSearch;

namespace Freedom.Domain.Model
{
	[DataContract(IsReference = true, Namespace = Namespace)]
	[KnownType(typeof(EntityBase))]
	public abstract partial class Entity 
	{
		public const string Namespace = "http://schemas.automatedstocktrader.com/domaindefinition";

		[Browsable(false)]
		public DateTime? AuditStartDateTime { get; set; }

		[Browsable(false)]
		public DateTime? AuditEndDateTime { get; set; }

		[Browsable(false)]
		[IndexHint(IndexHints.Ignore)]
		public abstract string EntityTypeName { get; }

		#region Serialization

		[Browsable(false)]
		protected bool IsSerializing { get; set; }

		[OnSerializing]
		private void OnSerializing(StreamingContext context)
		{
			IsSerializing = true;
		}
		
		[OnSerialized]
		private void OnSerialized(StreamingContext context)
		{
			IsSerializing = false;
		}
		
		#endregion
	}
	
	public abstract partial class EntityBase : INotifyPropertyChanged
	{
		#region Date Validation / Conversion

		protected DateTime ValidateDate(DateTime date)
		{
			Debug.Assert(date.TimeOfDay == TimeSpan.Zero, "Expected a date without a time component");

			return DateTime.SpecifyKind(date.Date, DateTimeKind.Utc);
		}

		protected DateTime? ValidateDate(DateTime? date)
		{
			return date.HasValue ? ValidateDate(date.Value) : (DateTime?)null;
		}

		#endregion

		#region Entity State (Change Tracking)

		[Browsable(false)]
		[DataMember(EmitDefaultValue = false)]
		[DefaultValue(EntityState.Unchanged)]
		public EntityState State { get; protected internal set; } = EntityState.Added;

		protected internal bool TrackChanges { get; set; }

		protected internal virtual void MarkAsChanged()
		{
			if (TrackChanges && State == EntityState.Unchanged)
				State = EntityState.Modified;
		}

		[OnDeserialized]
		private void OnDeserialized(StreamingContext context)
		{
			TrackChanges = true;
		}

		#endregion

		#region Implementation of INotifyPropertyChanged

		public event PropertyChangedEventHandler PropertyChanged;

		[NotifyPropertyChangedInvocator]
		public void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}

		protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
		{
			if (args == null)
				throw new ArgumentNullException(nameof(args));

			PropertyChanged?.Invoke(this, args);
		}

		#endregion

		#region Overrides of object

		public override string ToString()
		{
			return $"{GetType().Name} - {Id}";
		}

		#endregion
	}

	[CollectionDataContract(Namespace = Entity.Namespace)]
	public class EntityCollection<T> : ObservableCollection<T>
	{
		public EntityCollection()
		{
		}

		public EntityCollection([NotNull] IEnumerable<T> collection)
			: base(collection)
		{
		}

		public void AddRange([NotNull] IEnumerable<T> collection)
		{
			if (collection == null)
				throw new ArgumentNullException("collection");

			foreach (T item in collection)
				Add(item);
		}
	}
}
