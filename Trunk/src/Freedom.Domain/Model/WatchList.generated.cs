//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Domain.Infrastructure;
using Freedom.Domain.Services.Repository;
using Freedom.Collections;
using Freedom.ComponentModel;

namespace Freedom.Domain.Model
{
	[DataContract(Namespace = Namespace)]
	[Reportable]

	public partial class Watchlist : AggregateRoot
	{
		public static readonly ResolutionGraph DefaultResolutionGraph = new ResolutionGraph(
			Paths.Watchlist.WatchlistStock
		);

		public override string EntityTypeName
		{
			get { return "Watchlist"; }
		}

		[DataMember(EmitDefaultValue = false)]
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name == value) return;
				_name = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _name;

		[DataMember(EmitDefaultValue = false)]
		public string Description
		{
			get { return _description; }
			set
			{
				if (_description == value) return;
				_description = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _description;

		[DataMember(EmitDefaultValue = false)]
		public override User CreatedBy
		{
			get { return _createdBy; }
			set
			{
				if (object.ReferenceEquals(_createdBy, value)) return;

				_createdBy = value;

				if (value != null)
					CreatedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _createdBy;

		[DataMember(EmitDefaultValue = false)]
		public override User ModifiedBy
		{
			get { return _modifiedBy; }
			set
			{
				if (object.ReferenceEquals(_modifiedBy, value)) return;

				_modifiedBy = value;

				if (value != null)
					ModifiedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _modifiedBy;

		[DataMember(EmitDefaultValue = false)]
		public virtual ICollection<Guid> StockIds
		{
			get
			{
				if (_stockIds == null)
				{
					if (_watchlistStock != null)
					{
						_stockIds = new KeySetCollection<WatchlistStock>(_watchlistStock, x => x.StockId);
					}
					else if (!IsSerializing)
					{
						ObservableHashSet<Guid> hashSet = new ObservableHashSet<Guid>();
						hashSet.CollectionChanged += (s, a) => MarkAsChanged();
						_stockIds = hashSet;
					}
				}
				return _stockIds;
			}
			set
			{
				if (!object.ReferenceEquals(StockIds, value))
				{
					KeySetCollection<WatchlistStock> keySet = _stockIds as KeySetCollection<WatchlistStock>;

					if (keySet != null)
					{
						keySet.ReplaceWith(value);
					}
					else
					{
						_stockIds.Clear();

						if (value != null && value.Count > 0)
							foreach(Guid id in value)
								_stockIds.Add(id);
					}

					OnPropertyChanged();
				}
			}
		}
		private ICollection<Guid> _stockIds;

		[Browsable(false)]  // Intermediate Collection
		public virtual IList<WatchlistStock> WatchlistStock
		{
			get
			{
				if (_watchlistStock == null)
					_watchlistStock = new List<WatchlistStock>();

				return _watchlistStock;
			}
			set
			{
				if (!object.ReferenceEquals(_watchlistStock, value))
				{
					if (value != null && value.Count > 0)
					{
						if (_watchlistStock == null)
						{
							_watchlistStock = new List<WatchlistStock>(value);
						}
						else
						{
							_watchlistStock.Clear();
							_watchlistStock.AddRange(value);
						}
					}
					else if (_watchlistStock != null)
					{
						_watchlistStock.Clear();
					}

					OnPropertyChanged();
				}
			}
		}
		private List<WatchlistStock> _watchlistStock;

		public virtual CompositeCollection<WatchlistStock, Stock> Stocks
		{
			get
			{
				if  (_stocks == null)
				{
				    Debug.Assert(Assembly.GetEntryAssembly().FullName.Contains("Freedom.ReportEngine"),
				        "Composite many-to-many collections on entities should only every be accessed when running a report.");

					_stocks = new CompositeCollection<WatchlistStock, Stock>(
						WatchlistStock, x => x.Stock, x => x.StockId);
				}

				return _stocks;
			}
		}
		private CompositeCollection<WatchlistStock, Stock> _stocks;

		public override void Copy(Entity entity)
		{
			base.Copy(entity);

			Watchlist source = entity as Watchlist;

			if (source == null)
				throw new ArgumentException("entity", "entity must be an instance of Watchlist.");

			Name = source._name;
			Description = source._description;
		}
	}
}
