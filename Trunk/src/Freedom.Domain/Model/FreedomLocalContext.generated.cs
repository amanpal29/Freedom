//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;

namespace Freedom.Domain.Model
{
	public partial class FreedomLocalContext : DbContext
	{
		public const string DefaultConnectionString = "name=Freedom";

		public FreedomLocalContext()
		    : this(DefaultConnectionString)
		{
		}

	    public FreedomLocalContext(string connectionString)
	        : base(connectionString)
	    {
	        IObjectContextAdapter objectContextAdapter = this;

	        objectContextAdapter.ObjectContext.ObjectMaterialized += OnObjectMaterialized;
	    }

	    protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
		    throw new UnintentionalCodeFirstException();
		}

        protected virtual void OnObjectMaterialized(object sender, ObjectMaterializedEventArgs args)
        {
            EntityBase entity = args.Entity as EntityBase;

            if (entity != null)
            {
                entity.State = Entry(entity).State;
            }
        }

		public DbSet<ApplicationSetting> ApplicationSetting { get; set; }
		public DbSet<MarketIndex> MarketIndex { get; set; }
		public DbSet<Notification> Notification { get; set; }
		public DbSet<Permission> Permission { get; set; }
		public DbSet<Role> Role { get; set; }
		public DbSet<Stock> Stock { get; set; }
		public DbSet<StockExchange> StockExchange { get; set; }
		public DbSet<Strategy> Strategy { get; set; }
		public DbSet<User> User { get; set; }
		public DbSet<UserRole> UserRole { get; set; }
		public DbSet<WatchList> WatchList { get; set; }
		public DbSet<WatchListStock> WatchListStock { get; set; }

		public void Add(Entity entity)
		{
			if (entity == null)
				throw new ArgumentNullException("entity");

			switch (entity.EntityTypeName)
			{
				case "ApplicationSetting":
					ApplicationSetting.Add((ApplicationSetting) entity);
					break;

				case "MarketIndex":
					MarketIndex.Add((MarketIndex) entity);
					break;

				case "Notification":
					Notification.Add((Notification) entity);
					break;

				case "Permission":
					Permission.Add((Permission) entity);
					break;

				case "Role":
					Role.Add((Role) entity);
					break;

				case "Stock":
					Stock.Add((Stock) entity);
					break;

				case "StockExchange":
					StockExchange.Add((StockExchange) entity);
					break;

				case "Strategy":
					Strategy.Add((Strategy) entity);
					break;

				case "User":
					User.Add((User) entity);
					break;

				case "UserRole":
					UserRole.Add((UserRole) entity);
					break;

				case "WatchList":
					WatchList.Add((WatchList) entity);
					break;

				case "WatchListStock":
					WatchListStock.Add((WatchListStock) entity);
					break;

				default:
					throw new ArgumentException($"'{entity.EntityTypeName}' is not a known entity type.", nameof(entity));
			}
		}

		public Entity Find(string entityTypeName, params object[] primaryKey)
		{
			if (string.IsNullOrEmpty(entityTypeName))
                throw new ArgumentNullException("entityTypeName");

			if (primaryKey == null || primaryKey.Length == 0)
                throw new ArgumentNullException("primaryKey");

			switch (entityTypeName)
			{
				case "ApplicationSetting":
					return ApplicationSetting.Find(primaryKey);

				case "MarketIndex":
					return MarketIndex.Find(primaryKey);

				case "Notification":
					return Notification.Find(primaryKey);

				case "Permission":
					return Permission.Find(primaryKey);

				case "Role":
					return Role.Find(primaryKey);

				case "Stock":
					return Stock.Find(primaryKey);

				case "StockExchange":
					return StockExchange.Find(primaryKey);

				case "Strategy":
					return Strategy.Find(primaryKey);

				case "User":
					return User.Find(primaryKey);

				case "UserRole":
					return UserRole.Find(primaryKey);

				case "WatchList":
					return WatchList.Find(primaryKey);

				case "WatchListStock":
					return WatchListStock.Find(primaryKey);

				default:
					throw new ArgumentException($"'{entityTypeName}' is not a known entity type.", nameof(entityTypeName));
			}
		}

		public void Remove(Entity entity)
		{
			if (entity == null)
				throw new ArgumentNullException("entity");

			switch (entity.EntityTypeName)
			{
				case "ApplicationSetting":
					ApplicationSetting.Remove((ApplicationSetting) entity);
					break;

				case "MarketIndex":
					MarketIndex.Remove((MarketIndex) entity);
					break;

				case "Notification":
					Notification.Remove((Notification) entity);
					break;

				case "Permission":
					Permission.Remove((Permission) entity);
					break;

				case "Role":
					Role.Remove((Role) entity);
					break;

				case "Stock":
					Stock.Remove((Stock) entity);
					break;

				case "StockExchange":
					StockExchange.Remove((StockExchange) entity);
					break;

				case "Strategy":
					Strategy.Remove((Strategy) entity);
					break;

				case "User":
					User.Remove((User) entity);
					break;

				case "UserRole":
					UserRole.Remove((UserRole) entity);
					break;

				case "WatchList":
					WatchList.Remove((WatchList) entity);
					break;

				case "WatchListStock":
					WatchListStock.Remove((WatchListStock) entity);
					break;

				default:
					throw new ArgumentException($"'{entity.EntityTypeName}' is not a known entity type.", nameof(entity));
			}
		}
	}
}