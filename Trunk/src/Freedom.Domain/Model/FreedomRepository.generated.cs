//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using Freedom.Domain.Exceptions;
using Freedom.Domain.Services.Time;

namespace Freedom.Domain.Model
{
	public partial class FreedomRepository : IDisposable
	{
		private readonly ITimeService _timeService = IoC.TryGet<ITimeService>() ?? new LocalTimeService();

		private readonly FreedomLocalContext _db;
		private readonly Guid _currentUserId;
		private readonly DateTime _modifyDateTime;
		private bool _disposed;

		public FreedomRepository(FreedomLocalContext db, Guid currentUserId)
			: this(db, currentUserId, default(DateTime))
		{
		}

		public FreedomRepository(FreedomLocalContext db, Guid currentUserId, DateTime modifyDateTime)
		{
			_db = db;
			_currentUserId = currentUserId;
			_modifyDateTime = modifyDateTime > default(DateTime) ? modifyDateTime : _timeService.UtcNow;
		}

		public FreedomLocalContext Context
		{
			get { return _db; }
		}

		public void DetectChanges()
		{
			_db.ChangeTracker.DetectChanges();
		}

		public Task<int> SaveChangesAsync()
		{
			_db.ChangeTracker.DetectChanges();

			_db.UpdateAuditProperties(_currentUserId, _modifyDateTime);

			return _db.SaveChangesAsync();
		}
	
		// Explicitally updates the AuditProperties of a given AggregateRoot entity
		public void UpdateAuditProperties(AggregateRoot entity, EntityState state = EntityState.Modified)
		{
			if (state.HasFlag(EntityState.Added))
			{
				entity.CreatedBy = null;
				entity.CreatedById = _currentUserId;
				entity.CreatedDateTime = _modifyDateTime;
			}

			if (!state.HasFlag(EntityState.Unchanged))
			{
				if(entity.ModifiedById != _currentUserId)
					entity.ModifiedBy = null;

				entity.ModifiedById = _currentUserId;
				entity.ModifiedDateTime = _modifyDateTime;
			}
		}

		#region Get Methods

		public async Task<ApplicationSetting> GetApplicationSettingAsync(Guid id)
		{
			return await _db.ApplicationSetting.SingleOrDefaultAsync(x => x.Id == id);
		}

		public async Task<Notification> GetNotificationAsync(Guid id)
		{
			return await _db.Notification.SingleOrDefaultAsync(x => x.Id == id);
		}

		public async Task<User> GetUserAsync(Guid id)
		{
			return await _db.User.SingleOrDefaultAsync(x => x.Id == id);
		}

		#endregion

		#region LoadChildren Methods

		#endregion

		#region Add Methods

		public ApplicationSetting Add(ApplicationSetting item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			ApplicationSetting entity = new ApplicationSetting();

			entity.Copy(item);

			_db.ApplicationSetting.Add(entity);

			return entity;
		}

		public Notification Add(Notification item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			Notification entity = new Notification();

			entity.Copy(item);

			_db.Notification.Add(entity);

			return entity;
		}

		public User Add(User item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			User entity = new User();

			entity.Copy(item);

			_db.User.Add(entity);

			return entity;
		}

		#endregion

		#region Update Methods

		public async Task UpdateAsync(ApplicationSetting item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			IQueryable<ApplicationSetting> baseQuery = _db.ApplicationSetting.Where(x => x.Id == item.Id);

			ApplicationSetting existingItem = await baseQuery.FirstOrDefaultAsync();

			if (existingItem == null)
				throw new ConcurrencyException(ConcurrencyExceptionCode.ItemNotFound);

			existingItem.Copy(item);


			UpdateAuditProperties(existingItem, EntityState.Modified);
		}

		public async Task UpdateAsync(Notification item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			IQueryable<Notification> baseQuery = _db.Notification.Where(x => x.Id == item.Id);

			Notification existingItem = await baseQuery.FirstOrDefaultAsync();

			if (existingItem == null)
				throw new ConcurrencyException(ConcurrencyExceptionCode.ItemNotFound);

			existingItem.Copy(item);

		}

		public async Task UpdateAsync(User item)
		{
			if (item == null)
				throw new ArgumentNullException("item");

			IQueryable<User> baseQuery = _db.User.Where(x => x.Id == item.Id);

			User existingItem = await baseQuery.FirstOrDefaultAsync();

			if (existingItem == null)
				throw new ConcurrencyException(ConcurrencyExceptionCode.ItemNotFound);

			existingItem.Copy(item);


			UpdateAuditProperties(existingItem, EntityState.Modified);
		}

		#endregion

		#region Child Collection Update Methods

		#endregion

		#region Delete Methods

		public async Task<bool> DeleteApplicationSettingAsync(Guid id)
		{
			ApplicationSetting existingItem = await _db.ApplicationSetting.FindAsync(id);

			if (existingItem == null) return false;

			_db.ApplicationSetting.Remove(existingItem);

			return true;
		}

		public async Task<bool> DeleteNotificationAsync(Guid id)
		{
			Notification existingItem = await _db.Notification.FindAsync(id);

			if (existingItem == null) return false;

			_db.Notification.Remove(existingItem);

			return true;
		}

		public async Task<bool> DeleteUserAsync(Guid id)
		{
			User existingItem = await _db.User.FindAsync(id);

			if (existingItem == null) return false;

			_db.User.Remove(existingItem);

			return true;
		}

		#endregion

		#region Implementation of IDisposable

		public void Dispose()
		{
			Dispose(true);

			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing && !_disposed)
			{
				_disposed = true;
				_db.Dispose();
			}
		}

		#endregion
	}
}

