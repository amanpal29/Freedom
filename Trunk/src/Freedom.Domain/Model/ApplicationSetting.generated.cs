//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Domain.Infrastructure;
using Freedom.Domain.Services.Repository;
using Freedom.ComponentModel;

namespace Freedom.Domain.Model
{
	[DataContract(Namespace = Namespace)]
	[Reportable(false)]

	public partial class ApplicationSetting : AggregateRoot
	{
		public override string EntityTypeName
		{
			get { return "ApplicationSetting"; }
		}

		[DataMember(EmitDefaultValue = false)]
		public string Key
		{
			get { return _key; }
			set
			{
				if (_key == value) return;
				_key = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _key;

		[DataMember(EmitDefaultValue = false)]
		public string Value
		{
			get { return _value; }
			set
			{
				if (_value == value) return;
				_value = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _value;

		[DataMember(EmitDefaultValue = false)]
		public override User CreatedBy
		{
			get { return _createdBy; }
			set
			{
				if (object.ReferenceEquals(_createdBy, value)) return;

				_createdBy = value;

				if (value != null)
					CreatedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _createdBy;

		[DataMember(EmitDefaultValue = false)]
		public override User ModifiedBy
		{
			get { return _modifiedBy; }
			set
			{
				if (object.ReferenceEquals(_modifiedBy, value)) return;

				_modifiedBy = value;

				if (value != null)
					ModifiedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _modifiedBy;

		public override void Copy(Entity entity)
		{
			base.Copy(entity);

			ApplicationSetting source = entity as ApplicationSetting;

			if (source == null)
				throw new ArgumentException("entity", "entity must be an instance of ApplicationSetting.");

			Key = source._key;
			Value = source._value;
		}
	}
}
