//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Annotations;

namespace Freedom.Domain.Model
{
	[DataContract(IsReference = true, Namespace = Namespace)]
	public abstract partial class ComplexBase : INotifyPropertyChanged
	{
		public const string Namespace = Entity.Namespace;

		#region Implementation of INotifyPropertyChanged

		public event PropertyChangedEventHandler PropertyChanged;

		[NotifyPropertyChangedInvocator]
		public void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
		    OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}

		protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
		{
			if (args == null)
				throw new ArgumentNullException("args");

			PropertyChangedEventHandler propertyChangedHandler = PropertyChanged;

			if (propertyChangedHandler != null)
			{
				propertyChangedHandler(this, args);
			}
		}

		#endregion
	}
}
