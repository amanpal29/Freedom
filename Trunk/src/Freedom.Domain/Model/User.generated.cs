//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Freedom.Domain.Infrastructure;
using Freedom.Domain.Services.Repository;
using Freedom.Collections;
using Freedom.ComponentModel;

namespace Freedom.Domain.Model
{
	[DataContract(Namespace = Namespace)]
	[KnownType(typeof(MailingAddress))]
	[Reportable]

	public partial class User : AggregateRoot
	{
		public static readonly ResolutionGraph DefaultResolutionGraph = new ResolutionGraph(
			Paths.User.UserRole
		);

		public override string EntityTypeName
		{
			get { return "User"; }
		}

		[DataMember(EmitDefaultValue = false)]
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name == value) return;
				_name = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _name;

		[DataMember(EmitDefaultValue = false)]
		public string Username
		{
			get { return _username; }
			set
			{
				if (_username == value) return;
				_username = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _username;

		[DataMember(EmitDefaultValue = false)]
		public bool IsActive
		{
			get { return _isActive; }
			set
			{
				if (_isActive == value) return;
				_isActive = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private bool _isActive = true;

		[DataMember(EmitDefaultValue = false)]
		public string Domain
		{
			get { return _domain; }
			set
			{
				if (_domain == value) return;
				_domain = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _domain;

		[DataMember(EmitDefaultValue = false)]
		public string FirstName
		{
			get { return _firstName; }
			set
			{
				if (_firstName == value) return;
				_firstName = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _firstName;

		[DataMember(EmitDefaultValue = false)]
		public string MiddleName
		{
			get { return _middleName; }
			set
			{
				if (_middleName == value) return;
				_middleName = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _middleName;

		[DataMember(EmitDefaultValue = false)]
		public string LastName
		{
			get { return _lastName; }
			set
			{
				if (_lastName == value) return;
				_lastName = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _lastName;

		[DataMember(EmitDefaultValue = false)]
		public string WorkEmailAddress
		{
			get { return _workEmailAddress; }
			set
			{
				if (_workEmailAddress == value) return;
				_workEmailAddress = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _workEmailAddress;

		[DataMember(EmitDefaultValue = false)]
		public string HomeEmailAddress
		{
			get { return _homeEmailAddress; }
			set
			{
				if (_homeEmailAddress == value) return;
				_homeEmailAddress = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private string _homeEmailAddress;

		[DataMember(EmitDefaultValue = false)]
		public bool ForcePasswordChange
		{
			get { return _forcePasswordChange; }
			set
			{
				if (_forcePasswordChange == value) return;
				_forcePasswordChange = value;
				MarkAsChanged();
				OnPropertyChanged();
			}
		}
		private bool _forcePasswordChange = true;

		[DataMember(EmitDefaultValue = false)]
		public MailingAddress HomeAddress
		{
			get
			{
				if (!IsSerializing && _homeAddress == null)
				{
					_homeAddress = new MailingAddress();
					_homeAddress.PropertyChanged += HandleHomeAddressChanged;
				}
				return _homeAddress;
			}
			set
			{
				if (_homeAddress != value)
				{
					if (_homeAddress != null)
						_homeAddress.PropertyChanged -= HandleHomeAddressChanged;

					if (value != null)
						value.PropertyChanged += HandleHomeAddressChanged;

					_homeAddress = value;

					MarkAsChanged();
					OnPropertyChanged();
				}
			}
		}
		private MailingAddress _homeAddress;

		private void HandleHomeAddressChanged(object sender, PropertyChangedEventArgs args)
		{
			MarkAsChanged();
			OnPropertyChanged("HomeAddress");
		}

		[DataMember(EmitDefaultValue = false)]
		public override User CreatedBy
		{
			get { return _createdBy; }
			set
			{
				if (object.ReferenceEquals(_createdBy, value)) return;

				_createdBy = value;

				if (value != null)
					CreatedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _createdBy;

		[DataMember(EmitDefaultValue = false)]
		public override User ModifiedBy
		{
			get { return _modifiedBy; }
			set
			{
				if (object.ReferenceEquals(_modifiedBy, value)) return;

				_modifiedBy = value;

				if (value != null)
					ModifiedById = value.Id;

				OnPropertyChanged();
			}
		}
		private User _modifiedBy;

		[DataMember(EmitDefaultValue = false)]
		public virtual ICollection<Guid> RoleIds
		{
			get
			{
				if (_roleIds == null)
				{
					if (_userRole != null)
					{
						_roleIds = new KeySetCollection<UserRole>(_userRole, x => x.RoleId);
					}
					else if (!IsSerializing)
					{
						ObservableHashSet<Guid> hashSet = new ObservableHashSet<Guid>();
						hashSet.CollectionChanged += (s, a) => MarkAsChanged();
						_roleIds = hashSet;
					}
				}
				return _roleIds;
			}
			set
			{
				if (!object.ReferenceEquals(RoleIds, value))
				{
					KeySetCollection<UserRole> keySet = _roleIds as KeySetCollection<UserRole>;

					if (keySet != null)
					{
						keySet.ReplaceWith(value);
					}
					else
					{
						_roleIds.Clear();

						if (value != null && value.Count > 0)
							foreach(Guid id in value)
								_roleIds.Add(id);
					}

					OnPropertyChanged();
				}
			}
		}
		private ICollection<Guid> _roleIds;

		[Browsable(false)]  // Intermediate Collection
		public virtual IList<UserRole> UserRole
		{
			get
			{
				if (_userRole == null)
					_userRole = new List<UserRole>();

				return _userRole;
			}
			set
			{
				if (!object.ReferenceEquals(_userRole, value))
				{
					if (value != null && value.Count > 0)
					{
						if (_userRole == null)
						{
							_userRole = new List<UserRole>(value);
						}
						else
						{
							_userRole.Clear();
							_userRole.AddRange(value);
						}
					}
					else if (_userRole != null)
					{
						_userRole.Clear();
					}

					OnPropertyChanged();
				}
			}
		}
		private List<UserRole> _userRole;

		public virtual CompositeCollection<UserRole, Role> Roles
		{
			get
			{
				if  (_roles == null)
				{
				    Debug.Assert(Assembly.GetEntryAssembly().FullName.Contains("Freedom.ReportEngine"),
				        "Composite many-to-many collections on entities should only every be accessed when running a report.");

					_roles = new CompositeCollection<UserRole, Role>(
						UserRole, x => x.Role, x => x.RoleId);
				}

				return _roles;
			}
		}
		private CompositeCollection<UserRole, Role> _roles;

		public override void Copy(Entity entity)
		{
			base.Copy(entity);

			User source = entity as User;

			if (source == null)
				throw new ArgumentException("entity", "entity must be an instance of User.");

			Name = source._name;
			Username = source._username;
			IsActive = source._isActive;
			Domain = source._domain;
			FirstName = source._firstName;
			MiddleName = source._middleName;
			LastName = source._lastName;
			WorkEmailAddress = source._workEmailAddress;
			HomeEmailAddress = source._homeEmailAddress;
			HomeAddress = source._homeAddress;
			ForcePasswordChange = source._forcePasswordChange;
		}
	}
}
