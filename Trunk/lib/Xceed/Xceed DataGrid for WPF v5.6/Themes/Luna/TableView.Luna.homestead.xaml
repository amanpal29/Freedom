<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2015 Xceed Software Inc.

  [TableView.Luna.homestead.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdp="http://schemas.xceed.com/wpf/xaml/datagrid"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views">

   <ResourceDictionary.MergedDictionaries>

      <!-- Include the view independant, color-scheme independant, theme resources -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Luna.Resources.xaml" />

      <!-- Include the view dependant, color-scheme independant, theme graphics -->
      <markup:DataGridThemeResourceDictionary Source="Resources/TableView.Luna.Graphics.xaml" />

      <!-- Include the view independant, color-scheme dependant, theme resources -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Luna.homestead.Resources.xaml" />

      <!-- Include the standard grid element templates -->
      <markup:DataGridThemeResourceDictionary Source="../Common/TableView.GridElementTemplates.xaml" />

   </ResourceDictionary.MergedDictionaries>

   <!-- =================================================================== -->
   <!-- Resources specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <SolidColorBrush x:Key="gridLineBrush"
                    Color="Gray" />

   <SolidColorBrush x:Key="headerBackgroundBrush"
                    Color="#EBEADB" />

   <SolidColorBrush x:Key="headerForegroundBrush"
                    Color="Black" />

   <SolidColorBrush x:Key="headerDelimiterDarkBorderBrush"
                    Color="#C7C5B2" />

   <SolidColorBrush x:Key="headerDelimiterLightBorderBrush"
                    Color="White" />

   <SolidColorBrush x:Key="headerHotBackgroundBrush"
                    Color="#FAF8F3" />

   <SolidColorBrush x:Key="headerPressedBorderBrush"
                    Color="#A5A597" />

   <SolidColorBrush x:Key="headerPressedLightInnerHighlightBrush"
                    Color="#D0D1C9" />

   <SolidColorBrush x:Key="headerPressedDarkInnerHighlightBrush"
                    Color="#C1C2B8" />

   <SolidColorBrush x:Key="headerPressedBackgroundBrush"
                    Color="#DEDFD8" />

   <SolidColorBrush x:Key="warningBackgroundBrush"
                    Color="#FFC400" />

   <SolidColorBrush x:Key="warningForegroundBrush"
                    Color="Black" />

   <LinearGradientBrush x:Key="headerHighlightVerticalBorderBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#ECE9D8" />

      <GradientStop Offset="1"
                    Color="#CBC7B8" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="headerHighlightHorizontalBorderBrush"
                        StartPoint="0,0"
                        EndPoint="0,1">

      <GradientStop Offset="0"
                    Color="#ECE9D8" />

      <GradientStop Offset="1"
                    Color="#CBC7B8" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="headerHotHighlightVerticalBorderBrush"
                    Color="#CF7225" />

   <SolidColorBrush x:Key="headerHotHighlightVerticalBackgroundBrush"
                    Color="#E3914F" />

   <SolidColorBrush x:Key="headerHotHighlightHorizontalBorderBrush"
                    Color="#CF7225" />

   <SolidColorBrush x:Key="headerHotHighlightHorizontalBackgroundBrush"
                    Color="#E3914F" />

   <LinearGradientBrush x:Key="groupByControlBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#ACA899" />
      <GradientStop Offset="1"
                    Color="#D6D3CD" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="groupByControlForegroundBrush"
                    Color="Black" />

   <!-- =================================================================== -->
   <!-- Templates specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <!--**************************
    * TEMPLATE: RowSelector 
    ************************** -->
   <ControlTemplate x:Key="tableViewRowSelectorTemplate"
                    TargetType="local:RowSelector">

      <!-- This Grid is used to position the resizer Thumb over the RowSelector -->
      <Grid>

         <!-- Since we use a very specific border arrangement to represent the RowSelector,
              we do not use the TemplatedParent's BorderBrush and BorderThickness properties.-->
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}">

            <Grid>

               <Border Padding="{TemplateBinding Padding}">

                  <ContentPresenter x:Name="contentPresenter"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

               </Border>

               <Border x:Name="isPressedDarkInnerHighlight"
                       BorderThickness="1,1,0,0">

                  <Border x:Name="isPressedLightInnerHighlight"
                          BorderThickness="1,1,0,0" />
               </Border>

            </Grid>

         </Border>

         <Border x:Name="rightBorder"
                 Width="3"
                 HorizontalAlignment="Right"
                 Background="{StaticResource headerHighlightVerticalBorderBrush}" />

         <Rectangle x:Name="topBorder"
                    Fill="{StaticResource headerDelimiterLightBorderBrush}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Top"
                    Height="1"
                    Margin="3,0,4,0" />

         <Rectangle x:Name="bottomBorder"
                    Fill="{StaticResource headerDelimiterDarkBorderBrush}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Bottom"
                    Height="1"
                    Margin="3,0,4,0" />

         <!-- Thumb that is used to resize the Row. -->
         <Thumb x:Name="PART_RowResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                VerticalAlignment="Bottom" />

      </Grid>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="rightBorder"
                    Property="Background"
                    Value="{StaticResource headerHotHighlightVerticalBackgroundBrush}" />

            <Setter TargetName="rightBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerHotHighlightVerticalBorderBrush}" />

            <Setter TargetName="rightBorder"
                    Property="BorderThickness"
                    Value="0,1,1,1" />

            <Setter TargetName="rightBorder"
                    Property="CornerRadius"
                    Value="0,3,3,0" />

            <Setter TargetName="topBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="bottomBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerPressedBackgroundBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderThickness"
                    Value="0,1,1,1" />

            <Setter TargetName="contentPresenter"
                    Property="Margin"
                    Value="3,0,0,0" />

            <Setter TargetName="rightBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="isPressedLightInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedLightInnerHighlightBrush}" />

            <Setter TargetName="isPressedDarkInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedDarkInnerHighlightBrush}" />

         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
   <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

      <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

         <Grid Width="16"
               Background="Transparent"
               HorizontalAlignment="Center">

            <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}" />

            <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

            </ContentPresenter>
         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

            <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}" />

         </DataTrigger>

         <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterCell 
    ************************** -->
   <ControlTemplate x:Key="tableViewFilterCellTemplate"
                    TargetType="local:FilterCell">
      <Grid>
         <Grid x:Name="disabledPatern"
               Visibility="Collapsed">
            <Border>
               <Border.Background>
                  <LinearGradientBrush EndPoint="0.5,1"
                                       StartPoint="0.5,0">
                     <GradientStop Color="#E9EAED"
                                   Offset="1" />
                     <GradientStop Color="DarkGray" />
                  </LinearGradientBrush>
               </Border.Background>
            </Border>
            <Border Opacity="0.08">
               <Border.Background>
                  <LinearGradientBrush StartPoint="-0.015,0.1"
                                       EndPoint="9.187,9.236"
                                       SpreadMethod="Repeat"
                                       MappingMode="Absolute">
                     <GradientStop Offset="0"
                                   Color="Transparent" />
                     <GradientStop Color="Transparent"
                                   Offset="0.5" />
                     <GradientStop Offset="0.5"
                                   Color="White" />
                     <GradientStop Offset="1"
                                   Color="White" />
                  </LinearGradientBrush>
               </Border.Background>
            </Border>
         </Grid>

         <Border x:Name="gridLinesBorder" />
         <Grid>
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
               <Grid>
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition />
                     <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>

                  <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                  <Button x:Name="clearFilterButton"
                          Focusable="False"
                          Command="local:DataGridCommands.ClearFilter"
                          Cursor="Hand"
                          Visibility="Collapsed"
                          Grid.Column="1"
                          Margin="0,2,2,0"
                          VerticalAlignment="Top"
                          Template="{StaticResource clearFilterButtonTemplate}" />
               </Grid>
            </Border>
         </Grid>

      </Grid>

      <ControlTemplate.Triggers>
         <Trigger Property="ContentTemplate"
                  Value="{x:Null}">

            <Setter TargetName="disabledPatern"
                    Property="Visibility"
                    Value="Visible" />

         </Trigger>

         <!-- Show the ClearFilter Button if there is a filter value and the 
              ClearFilterButtonVisibility is set to Auto. -->
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="HasFilter"
                          Value="True" />

               <Condition Property="local:FilterCell.ClearFilterButtonVisibility"
                          Value="Auto" />
            </MultiTrigger.Conditions>

            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </MultiTrigger>

         <!-- Show the ClearFilter Button if the ClearFilterButtonVisibility is set to Always. -->
         <Trigger Property="local:FilterCell.ClearFilterButtonVisibility"
                  Value="Always">
            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
   <conv:IntAdditionConverter x:Key="IntAdditionConverter" />
   <conv:SortingDirectionToBooleanConverter x:Key="SortingDirectionToBooleanConverter" />
   
   <ControlTemplate x:Key="tableViewColumnManagerCellTemplate"
                    TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
         </Style>
      </ControlTemplate.Resources>

      <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
      <Grid>

         <Border BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

            <Grid>

               <DockPanel>

                  <Border x:Name="thumbToggleBackgroundBorder"
                          DockPanel.Dock="Right">

                     <Grid>

                        <Border x:Name="toggleDelimeterBorder"
                                BorderBrush="{StaticResource headerDelimiterDarkBorderBrush}"
                                BorderThickness="1,0,0,0"
                                Margin="0,4,0,4"
                                Background="Transparent"
                                Visibility="Collapsed">

                           <Border x:Name="toggleDelimeterBorder2"
                                   BorderBrush="{StaticResource headerDelimiterLightBorderBrush}"
                                   BorderThickness="1,0,0,0"
                                   Margin="0,0,0,0"
                                   Background="Transparent"
                                   Visibility="Collapsed">

                           </Border>

                        </Border>

                        <ToggleButton x:Name="toggleButton"
                                      VerticalAlignment="Stretch"
                                      Focusable="False"
                                      Visibility="Collapsed"
                                      Margin="2,0,0,0"
                                      Opacity="0.5" />

                        <local:AutoFilterPopup x:Name="filterOptions"
                                               PopupAnimation="Slide"
                                               StaysOpen="False"
                                               AllowsTransparency="True"
                                               PlacementTarget="{Binding ElementName=toggleButton}">

                           <local:AutoFilterControl x:Name="autoFilterControl"
                                                    AutoFilterColumn="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn}"
                                                    Style="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn.AutoFilterControlStyle}" />
                        </local:AutoFilterPopup>

                     </Grid>

                  </Border>

                  <!-- Since we use a very specific border arrangement to represent the ColumnManagerCell,
              we do not use the TemplatedParent's BorderBrush and BorderThickness properties.-->
                  <Border x:Name="rootBorder"
                          Background="{TemplateBinding Background}">

                     <Grid>

                        <Border Padding="{TemplateBinding Padding}">

                           <Grid x:Name="contentPanel"
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                              <Grid.ColumnDefinitions>
                                 <ColumnDefinition Width="*" />
                                 <ColumnDefinition Width="Auto" />
                                 <ColumnDefinition Width="Auto" />
                              </Grid.ColumnDefinitions>

                              <!-- Same ContentPresenter as in the base Cell Template. -->
                              <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                                          Grid.Column="0" />

                              <!-- ContentPresenter that is used to display the sort glyph.
                                      We explicitely set its Content property to Null to prevent the XAML parser
                                      from implicitely setting it to its TemplatedParent's Content. -->
                              <ContentPresenter x:Name="sortGlyphPresenter"
                                                Content="{x:Null}"
                                                ContentTemplate="{x:Null}"
                                                Grid.Column="1" />

                              <ContentPresenter x:Name="sortIndexGlyphPresenter"
                                                Grid.Column="2"
                                                TextBlock.Foreground="{TemplateBinding Foreground}"
                                                Content="{Binding Path=(local:Cell.ParentCell).ParentColumn.SortIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource IntAdditionConverter}, ConverterParameter=1}"
                                                ContentTemplate="{x:Null}"
                                                Margin="3,0,0,0"
                                                Visibility="Collapsed" />
                           </Grid>

                        </Border>

                     </Grid>

                  </Border>

               </DockPanel>

               <Border x:Name="bottomBorder"
                       Height="3"
                       VerticalAlignment="Bottom"
                       Background="{StaticResource headerHighlightHorizontalBorderBrush}" />

               <Border x:Name="rightBorder"
                       BorderThickness="0,0,1,0"
                       BorderBrush="{StaticResource headerDelimiterLightBorderBrush}"
                       Background="{StaticResource headerDelimiterDarkBorderBrush}"
                       Margin="0,3,0,4"
                       VerticalAlignment="Stretch"
                       HorizontalAlignment="Right"
                       Width="2" />

               <Border x:Name="rightPressedBorder"
                       BorderThickness="0,0,1,0"
                       BorderBrush="{StaticResource headerPressedBorderBrush}"
                       Visibility="Hidden"
                       VerticalAlignment="Stretch"
                       HorizontalAlignment="Right"
                       Width="1" />

               <Border x:Name="isPressedDarkInnerHighlight"
                       BorderThickness="1,1,0,0"
                       Margin="1,0,1,0">

                  <Border x:Name="isPressedLightInnerHighlight"
                          BorderThickness="1,1,0,0" />

               </Border>

            </Grid>

         </Border>

         <!-- Thumb that is used to resize the Column. -->
         <Thumb x:Name="PART_ColumnResizerThumbLeft"
                Style="{StaticResource invisibleThumbStyle}"
                Width="6"
                HorizontalAlignment="Left" />

         <!-- Thumb that is used to resize the Column. -->
         <Thumb x:Name="PART_ColumnResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                Width="6"
                HorizontalAlignment="Right" />

      </Grid>

      <ControlTemplate.Triggers>
         <!-- The following triggers allows the content to correctly align to the center when the mouse is over the ColumnManagerCell and the HorizontalContentAlignment is Center -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Value="Visible"
                          Binding="{Binding ElementName=toggleButton, Path=Visibility}" />
               <Condition Value="Center"
                          Binding="{Binding RelativeSource={RelativeSource Self},
                        Path=HorizontalContentAlignment}" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_CellContentPresenter"
                    Property="Margin"
                    Value="18,0,0,0" />
         </MultiDataTrigger>
         <!-- Trigger related to the filteringToggleButton-->
         <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
         </Trigger>

         <!-- Always visible if filterOptions popup IsOpen -->
         <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="Background"
                    Value="{StaticResource headerHotHighlightHorizontalBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerHotHighlightHorizontalBorderBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="bottomBorder"
                    Property="CornerRadius"
                    Value="0,0,3,3" />

            <Setter TargetName="rightBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

         <!-- Display FilterToggleButton Trigger on MouseOver -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

         </MultiDataTrigger>

         <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

         </MultiDataTrigger>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="Background"
                    Value="{StaticResource headerHotHighlightHorizontalBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerHotHighlightHorizontalBorderBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="bottomBorder"
                    Property="CornerRadius"
                    Value="0,0,3,3" />

            <Setter TargetName="rightBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerPressedBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource headerPressedBackgroundBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,-1" />

            <Setter TargetName="bottomBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="rightPressedBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="isPressedLightInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedLightInnerHighlightBrush}" />

            <Setter TargetName="isPressedDarkInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedDarkInnerHighlightBrush}" />

         </Trigger>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding Path=ParentColumn.SortDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource SortingDirectionToBooleanConverter}}"
                          Value="True" />
               <Condition Binding="{Binding Path=(local:DataGridControl.DataGridContext).ShowSortIndex, RelativeSource={RelativeSource Self}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SortIndexGlyph}" />
         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.PreviousVisibleColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupByItem 
    ************************** -->
   <ControlTemplate x:Key="tableViewGroupByItemTemplate"
                    TargetType="local:GroupByItem">

      <Grid>

         <Border x:Name="rootBorder"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Background="{TemplateBinding Background}">

            <Grid>

               <Border Padding="{TemplateBinding Padding}">

                  <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                  <StackPanel x:Name="contentPanel"
                              Orientation="Horizontal">

                     <!-- Same ContentPresenter as in the base Cell Template. -->
                     <ContentPresenter Content="{TemplateBinding Content}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                     <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitely set its Content property to Null to prevent the XAML parser
                          from implicitely setting it to its TemplatedParent's Content. -->
                     <ContentPresenter x:Name="sortGlyphPresenter"
                                       Content="{x:Null}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                       Margin="6,0,0,0"
                                       Visibility="Hidden" />

                  </StackPanel>

               </Border>

               <Border x:Name="isPressedDarkInnerHighlight"
                       BorderThickness="1,1,0,0">

                  <Border x:Name="isPressedLightInnerHighlight"
                          BorderThickness="1,1,0,0" />
               </Border>

               <!-- This Grid is used to draw the gradient at the right side of the RowSelector.-->
               <Border x:Name="bottomBorder"
                       Height="3"
                       VerticalAlignment="Bottom" />

            </Grid>

         </Border>

      </Grid>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="Background"
                    Value="{StaticResource headerHotHighlightHorizontalBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerHotHighlightHorizontalBorderBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="bottomBorder"
                    Property="CornerRadius"
                    Value="0,0,3,3" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerPressedBackgroundBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,0" />

            <Setter TargetName="bottomBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="isPressedLightInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedLightInnerHighlightBrush}" />

            <Setter TargetName="isPressedDarkInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedDarkInnerHighlightBrush}" />

         </Trigger>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupByControlNode
    ************************** -->
   <ControlTemplate x:Key="tableViewHierarchicalGroupByControlNodeTemplate"
                    TargetType="local:HierarchicalGroupByControlNode">

      <StackPanel Orientation="Horizontal"
                  Background="{TemplateBinding Background}">

         <Border BorderBrush="{StaticResource gridLineBrush}"
                 Background="#55FFFFFF"
                 BorderThickness="1"
                 VerticalAlignment="Top"
                 HorizontalAlignment="Center">

            <TextBlock x:Name="titleTextBlock"
                       Text="{TemplateBinding Title}"
                       Margin="2" />
         </Border>

         <ItemsPresenter />
      </StackPanel>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupByItem
    ************************** -->
   <ControlTemplate x:Key="tableViewHierarchicalGroupByItemTemplate"
                    TargetType="local:HierarchicalGroupByItem">

      <Grid>

         <Border x:Name="rootBorder"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Background="{TemplateBinding Background}">

            <Grid>

               <Border Padding="{TemplateBinding Padding}">

                  <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                  <StackPanel x:Name="contentPanel"
                              Orientation="Horizontal">

                     <!-- Same ContentPresenter as in the base Cell Template. -->
                     <ContentPresenter Content="{TemplateBinding Content}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                     <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitely set its Content property to Null to prevent the XAML parser
                          from implicitely setting it to its TemplatedParent's Content. -->
                     <ContentPresenter x:Name="sortGlyphPresenter"
                                       Content="{x:Null}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                       Margin="6,0,0,0"
                                       Visibility="Hidden" />

                  </StackPanel>

               </Border>

               <Border x:Name="isPressedDarkInnerHighlight"
                       BorderThickness="1,1,0,0">

                  <Border x:Name="isPressedLightInnerHighlight"
                          BorderThickness="1,1,0,0" />
               </Border>

               <!-- This Grid is used to draw the gradient at the right side of the RowSelector.-->
               <Border x:Name="bottomBorder"
                       Height="3"
                       VerticalAlignment="Bottom" />

            </Grid>

         </Border>

      </Grid>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerHotBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="Background"
                    Value="{StaticResource headerHotHighlightHorizontalBackgroundBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerHotHighlightHorizontalBorderBrush}" />

            <Setter TargetName="bottomBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="bottomBorder"
                    Property="CornerRadius"
                    Value="0,0,3,3" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource headerPressedBackgroundBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1" />

            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,0" />

            <Setter TargetName="bottomBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="isPressedLightInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedLightInnerHighlightBrush}" />

            <Setter TargetName="isPressedDarkInnerHighlight"
                    Property="BorderBrush"
                    Value="{StaticResource headerPressedDarkInnerHighlightBrush}" />

         </Trigger>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!-- =================================================================== -->
   <!-- Styles required by some grid elements                               -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: baseSplitterStyle
    ************************** -->
   <Style x:Key="baseFixedColumnSplitterStyle"
          TargetType="views:FixedColumnSplitter">

   </Style>

   <!--**************************
    * STYLE: rowSplitterStyle
    ************************** -->
   <Style x:Key="rowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <Setter Property="Background"
              Value="#D5D2C3" />

   </Style>

   <!--**************************
    * STYLE: ColumnManagerRowSplitterStyle
    ************************** -->
   <Style x:Key="columnManagerRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <Setter Property="Template"
              Value="{StaticResource columnManagerRowFixedColumnSplitterTemplate}" />
   </Style>

   <!--**************************
    * STYLE: StatRowSplitterStyle
    ************************** -->
   <Style x:Key="statRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <!-- For aesthetic reasons, the FixedColumnSplitter is not shown in the StatRow. -->
      <Setter Property="Template"
              Value="{x:Null}" />

   </Style>

   <!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
   <Style x:Key="cellErrorStyle"
          TargetType="local:Cell">

      <Setter Property="Background"
              Value="{StaticResource errorBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource errorForegroundBrush}" />

      <Setter Property="ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}" />

      <Style.Triggers>
         <Trigger Property="IsValidationErrorRestrictive"
                  Value="True">
            <Setter Property="Background"
                    Value="{StaticResource errorBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsValidationErrorRestrictive"
                  Value="False">

            <Setter Property="Foreground"
                    Value="{StaticResource warningForegroundBrush}" />

            <Setter Property="Background"
                    Value="{StaticResource warningBackgroundBrush}" />

         </Trigger>
      </Style.Triggers>

   </Style>

   <!-- =================================================================== -->
   <!-- Keyed Styles of grid elements                                       -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: DataGridControl 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGridControlStyle"
          TargetType="local:DataGridControl">

      <Setter Property="BorderBrush"
              Value="{StaticResource gridControlBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Background"
              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

      <Setter Property="Foreground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- This is required to display gridlines of uniform thickness -->
      <Setter Property="SnapsToDevicePixels"
              Value="True" />

      <Setter Property="CellErrorStyle"
              Value="{StaticResource cellErrorStyle}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewDataGridControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DataGridControl (with hosted controls theming)
    ************************** -->
   <Style x:Key="tableViewForcedLunaHomesteadGridControlStyle"
          BasedOn="{StaticResource tableViewLunaHomesteadGridControlStyle}"
          TargetType="local:DataGridControl">

      <Style.Resources>
         <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
               <markup:FrameworkThemeResourceDictionary Source="/PresentationFramework.Luna;V4.0.0.0;31bf3856ad364e35;component\themes/luna.homestead.xaml" />
               <xcdp:ControlsThemeResourceDictionary Source="/themes/generic.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--**************************
             * STYLE: NavigableComboBox
             ************************** -->
            <Style TargetType="{x:Type xcdp:NavigableComboBox}"
                   BasedOn="{StaticResource {x:Type ComboBox}}" />
         </ResourceDictionary>
      </Style.Resources>

   </Style>

   <!--**************************
    * STYLE: RowSelectorPane
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadRowSelectorPaneStyle"
          TargetType="local:RowSelectorPane">

      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="TextElement.Foreground"
              Value="{StaticResource headerForegroundBrush}" />

   </Style>

   <!--**************************
    * STYLE: RowSelector 
    ************************** -->
   <conv:TypeToBooleanConverter x:Key="rowTypeConverter" />
   <Style x:Key="tableViewLunaHomesteadRowSelectorStyle"
          TargetType="local:RowSelector">

      <!-- Set the RowSelector's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying RowSelectorPane. -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="HorizontalContentAlignment"
              Value="Center" />

      <Setter Property="VerticalContentAlignment"
              Value="Top" />

      <Setter Property="Padding"
              Value="2" />

      <Setter Property="Template"
              Value="{StaticResource tableViewRowSelectorTemplate}" />

      <Style.Triggers>

         <!-- The DataContext of a RowSelector is always set to its corresponding
              Row/item. This is why we use DataTriggers with no explicit Binding Source
              when we want to react to properties of the Row/item. -->

         <!-- When the Row is Current, display the current glyph in the RowSelector (but not when the Row is an InsertionRow. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:InsertionRow} }"
                          Value="False" />
            </MultiDataTrigger.Conditions>
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />
         </MultiDataTrigger>

         <!-- When the Row is being edited, display the appropriate glyph in the RowSelector. -->
         <Trigger Property="IsBeingEdited"
                  Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

         </Trigger>

         <!-- When the Row has a validation error, display the appropriate glyph in the RowSelector. -->
         <Trigger Property="HasValidationError"
                  Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />
         </Trigger>

         <!-- When the row is an InsertionRow and the row is not being current -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:InsertionRow} }"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsBeingEdited}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasValidationError}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}" />
         </MultiDataTrigger>

         <!-- When the row is a FilterRow, always show the FilterRowGlyph. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:FilterRow}}"
                      Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}" />
            <Setter Property="Margin"
                    Value="0,2,0,0" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: Row Style
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadRowStyle"
          TargetType="local:Row">

      <Setter Property="FocusVisualStyle"
              Value="{StaticResource tableViewRowFocusVisualStyle}" />

      <Setter Property="SelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />

      <!-- The Row is responsible for drawing the horizontal gridlines. It draws only its top gridline,
           assuming that the bottom gridline will be drawn by its following row/element -->

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineBrush}" />

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource rowSplitterStyle}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewRowTemplate}" />

      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <Style.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(views:ViewBase.IsLastItem)}"
                      Value="True">
            <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top, Bottom'}" />
            <Setter Property="Margin"
                    Value="0,0,0,5" />
         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.HasExpandedDetails)}"
                      Value="True">
            <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top, Bottom'}" />

         </DataTrigger>

         <!-- Enabled/Disabled Odd datarow style alternation -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridVirtualizingPanel.ItemIndex), Converter={x:Static conv:IndexToOddConverter.Singleton}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter Property="Background"
                    Value="#F2F1E7" />

         </MultiDataTrigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: DataRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadDataRowStyle"
          TargetType="local:DataRow"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}">

      <Setter Property="Template"
              Value="{StaticResource tableViewDataRowTemplate}" />
      
   </Style>

   <!--**************************
    * STYLE: InsertionRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadInsertionRowStyle"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource tableViewLunaHomesteadDataRowStyle}">

      <Setter Property="Template"
              Value="{StaticResource tableViewRowTemplate}" />
      
      <Style.Triggers>
         <Trigger Property="IsCurrent"
                  Value="True">

            <Setter Property="Background"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionBackground}" />
            <Setter Property="Foreground"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionForeground}" />

         </Trigger>

         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- We don't want to display the Group Margins for the InsertionRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadColumnManagerRowStyle"
          TargetType="local:ColumnManagerRow"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}">

      <!-- Use a different background and foreground than the base Row style. -->
      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource columnManagerRowSplitterStyle}" />

      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="ColumnChooserTemplate"
              Value="{StaticResource columnManagerRowContextMenuTemplate}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewColumnManagerRowTemplate}" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- We don't want to display the Group Margins for the ColumnManagerRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: StatRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadStatRowStyle"
          TargetType="local:StatRow"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}">

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource statRowSplitterStyle}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewStatRowTemplate}" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- When the StatRow is not inside a group, we don't want to display the Group Margins. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FilterRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadFilterRowStyle"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}">

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- When the StatRow is not inside a group, we don't want to display the Group Margins. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FlexibleRow 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadFlexibleRowStyle"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}" />

   <!--**************************
    * STYLE: Cell Style
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadCellStyle"
          TargetType="local:Cell">

      <Setter Property="CurrentBackground"
              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

      <Setter Property="CurrentForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <Setter Property="SelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Right'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewCellTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DataCell
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadDataCellStyle"
          TargetType="local:DataCell"
          BasedOn="{StaticResource tableViewLunaHomesteadCellStyle}" />

   <!--**************************
    * STYLE: InsertionCell
   ************************** -->
   <Style x:Key="tableViewLunaHomesteadInsertionCellStyle"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource tableViewLunaHomesteadDataCellStyle}" />

   <!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadColumnManagerCellStyle"
          TargetType="local:ColumnManagerCell">

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource columnManagerCellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewColumnManagerCellTemplate}" />

   </Style>

   <!--**************************
    * STYLE: StatCell
   ************************** -->
   <Style x:Key="tableViewLunaHomesteadStatCellStyle"
          TargetType="local:StatCell">

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- To prevent difference in size between StatCells and DataCells-->
      <Setter Property="BorderBrush"
              Value="Transparent" />

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewStatCellTemplate}" />

   </Style>

   <!--**************************
    * STYLE: FilterCell
   ************************** -->
   <Style x:Key="tableViewLunaHomesteadFilterCellStyle"
          TargetType="local:FilterCell"
          BasedOn="{StaticResource tableViewLunaHomesteadCellStyle}">
      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewFilterCellTemplate}" />

   </Style>

   <!--**************************
    * STYLE: FlexibleCell
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadFlexibleCellStyle"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource tableViewLunaHomesteadCellStyle}" >

      <Setter Property="Content"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=DefaultContent}" />

   </Style>

   <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGroupByControlStyle"
          TargetType="local:GroupByControl">

      <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical TableView, a height of at least 25 is appropriate for the GroupByControl. -->
      <Setter Property="MinHeight"
              Value="25" />

      <Setter Property="Background"
              Value="{StaticResource groupByControlBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource groupByControlForegroundBrush}" />

      <Setter Property="Padding"
              Value="8" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="BorderThickness"
              Value="1,1,1,0" />

      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource tableViewGroupByControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupByItem
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGroupByItemStyle"
          TargetType="local:GroupByItem">

      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Template"
              Value="{StaticResource tableViewGroupByItemTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupHeaderControl 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGroupHeaderControlStyle"
          TargetType="local:GroupHeaderControl">

      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="SelectionState"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=Group.SelectionState}" />

      <Setter Property="SelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="BorderThickness"
              Value="0,1,1,0" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="VerticalContentAlignment"
              Value="Center" />

      <!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it is holding the various InputBindings that make the
           GroupHeaderControl work. -->
      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource tableViewGroupHeaderControlTemplate}" />

      <Style.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(views:ViewBase.IsLastItem)}"
                      Value="True">

            <Setter Property="BorderThickness"
                    Value="0,1,1,1" />

            <Setter Property="Margin"
                    Value="0,0,0,5" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGroupLevelIndicatorStyle"
          TargetType="local:GroupLevelIndicator">

      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="BorderThickness"
              Value="0,0,1,0" />

      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).GroupLevelIndicatorWidth}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewGroupLevelIndicatorTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DetailIndicator
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadDetailIndicatorStyle"
          TargetType="local:DetailIndicator">

      <Setter Property="Background"
              Value="{x:Null}" />

      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DetailIndicatorWidth}" />

      <Setter Property="Template"
              Value="{StaticResource tableViewDetailIndicatorTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadGroupLevelIndicatorPaneStyle"
          TargetType="local:GroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource tableViewGroupLevelIndicatorPaneTemplate}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Style.Triggers>
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsLeaf"
                          Value="False" />
               <Condition Property="views:ViewBase.IsLastItem"
                          Value="True" />
            </MultiTrigger.Conditions>

            <Setter Property="Margin"
                    Value="0,0,0,-5" />
         </MultiTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadHierarchicalGroupLevelIndicatorPaneStyle"
          TargetType="local:HierarchicalGroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource tableViewHierarchicalGroupLevelIndicatorPaneTemplate}" />

      <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
              Value="True" />

      <Setter Property="local:GroupLevelIndicatorPane.ShowVerticalBorder"
              Value="True" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">

            <!-- Stop the propagation of the value set by the default style trigger of
                 the ColumnManagerRow, InsertionRow, FilterRow and StatRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="True" />

         </Trigger>
      </Style.Triggers>
   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByControlNode
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadHierarchicalGroupByControlNodeStyle"
          TargetType="local:HierarchicalGroupByControlNode">

      <Setter Property="StairHeight"
              Value="0" />

      <Setter Property="ConnectionLineOffset"
              Value="0" />

      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

      <Setter Property="Margin"
              Value="0,5,0,5" />

      <Setter Property="Template"
              Value="{StaticResource tableViewHierarchicalGroupByControlNodeTemplate}" />

   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByControl
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadHierarchicalGroupByControlStyle"
          TargetType="local:HierarchicalGroupByControl">

      <Setter Property="Background"
              Value="{StaticResource groupByControlBackgroundBrush}" />

      <Setter Property="StairHeight"
              Value="0" />

      <Setter Property="ConnectionLineOffset"
              Value="0" />

      <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource tableViewCommonHierarchicalGroupByControlTemplate}" />

      <Style.Triggers>

         <!-- We use the old GroupByControl Template if there are no Details in the DataGridControl.ItemsSource -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HasDetails}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ParentDataGridContext, Converter={StaticResource nullToBooleanConverter}}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Template"
                    Value="{StaticResource tableViewCommonHierarchicalGroupByControlOldGroupByControlTemplate}" />

         </MultiDataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByItem
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadHierarchicalGroupByItemStyle"
          TargetType="local:HierarchicalGroupByItem">

      <Setter Property="Background"
              Value="{StaticResource headerBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Margin"
              Value="4,0,4,0" />

      <Setter Property="Template"
              Value="{StaticResource tableViewHierarchicalGroupByItemTemplate}" />

   </Style>

   <!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadAutoFilterControlStyle"
          TargetType="local:AutoFilterControl">
      <Setter Property="Width"
              Value="200" />
      <Setter Property="BorderThickness"
              Value="1" />
      <Setter Property="BorderBrush"
              Value="Black" />
      <Setter Property="Background"
              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
      <Setter Property="Foreground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
      <Setter Property="Template"
              Value="{StaticResource tableViewAutoFilterControlTemplate}" />
      <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
   </Style>

   <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
      <Setter Property="IsCheckable"
              Value="True" />
      <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
      <Setter Property="StaysOpenOnClick"
              Value="True" />
      <Setter Property="HorizontalContentAlignment"
              Value="Left" />
      <Setter Property="VerticalContentAlignment"
              Value="Center" />
   </Style>

   <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadColumnChooserContextMenuStyle"
          TargetType="{x:Type local:ColumnChooserContextMenu}"
          BasedOn="{StaticResource {x:Type ContextMenu}}">
      <Setter Property="ItemContainerStyle"
              Value="{StaticResource tableViewLunaHomesteadColumnChooserContextMenuMenuItemStyle}" />
      <Setter Property="DisplayMemberPath"
              Value="Title" />
      <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
   </Style>

   <!--**************************
    * STYLE: ScrollTip
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadScrollTipStyle"
          TargetType="local:ScrollTip">

      <Setter Property="Template"
              Value="{StaticResource scrollTipTemplate}" />

      <Setter Property="Background">
         <Setter.Value>
            <LinearGradientBrush StartPoint="0.5,1"
                                 EndPoint="0.5,0">
               <GradientStop Color="#FFC7CDAC"
                             Offset="0" />

               <GradientStop Color="#FFE8ECD1"
                             Offset="1" />
            </LinearGradientBrush>
         </Setter.Value>
      </Setter>

      <Setter Property="BorderBrush"
              Value="#FF849072" />

      <Setter Property="TextElement.Foreground"
              Value="Black" />

      <Setter Property="VerticalAlignment"
              Value="Center" />

      <Setter Property="HorizontalAlignment"
              Value="Right" />

   </Style>

   <!--**************************
    * STYLE: ColumnChooserControl 
    ************************** -->
   <Style x:Key="tableViewLunaHomesteadColumnChooserControlStyle"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource LunaHomesteadColumnChooserControlStyle}" />

   <!-- =================================================================== -->
   <!-- Default values for the View                                         -->
   <!-- =================================================================== -->

   <Style x:Key="tableViewLunaHomesteadDefaultValues"
          TargetType="views:TableView">

      <Setter Property="HorizontalGridLineBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="HorizontalGridLineThickness"
              Value="1" />

      <Setter Property="VerticalGridLineBrush"
              Value="{StaticResource gridLineBrush}" />

      <Setter Property="VerticalGridLineThickness"
              Value="1" />

      <Setter Property="GroupLevelIndicatorWidth"
              Value="17" />

      <Setter Property="DetailIndicatorWidth"
              Value="34" />

      <Setter Property="DefaultDropMarkPen"
              Value="{StaticResource dropMarkPen}" />

      <Setter Property="AutoFilterDropDownGlyph"
              Value="{StaticResource autoFilterDropDownGlyph}" />

      <Setter Property="AutoFilterGlyph"
              Value="{StaticResource autoFilterGlyph}" />

      <!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

      <Setter Property="AscendingSortGlyph"
              Value="{StaticResource ascendingSortGlyph}" />

      <Setter Property="DescendingSortGlyph"
              Value="{StaticResource descendingSortGlyph}" />

      <Setter Property="SortIndexGlyph"
              Value="{StaticResource sortIndexGlyph}" />

      <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />

      <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />

      <Setter Property="CurrentItemGlyph"
              Value="{StaticResource currentItemGlyph}" />

      <Setter Property="EditingRowGlyph"
              Value="{StaticResource editingRowGlyph}" />

      <Setter Property="ValidationErrorGlyph"
              Value="{StaticResource validationErrorGlyph}" />

      <Setter Property="InsertionRowGlyph"
              Value="{StaticResource insertionRowGlyph}" />

      <Setter Property="FilterRowGlyph"
              Value="{StaticResource filterRowGlyph}" />

      <Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />

      <Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}" />

   </Style>

   <!-- =================================================================== -->
   <!-- DefaultStyleKey declarations                                        -->
   <!-- =================================================================== -->

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme}"
          TargetType="views:TableView"
          BasedOn="{StaticResource tableViewLunaHomesteadDefaultValues}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataGridControl}"
          TargetType="local:DataGridControl"
          BasedOn="{StaticResource tableViewForcedLunaHomesteadGridControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:RowSelectorPane}"
          TargetType="local:RowSelectorPane"
          BasedOn="{StaticResource tableViewLunaHomesteadRowSelectorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:RowSelector}"
          TargetType="local:RowSelector"
          BasedOn="{StaticResource tableViewLunaHomesteadRowSelectorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:Row}"
          TargetType="local:Row"
          BasedOn="{StaticResource tableViewLunaHomesteadRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataRow}"
          TargetType="local:DataRow"
          BasedOn="{StaticResource tableViewLunaHomesteadDataRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:InsertionRow}"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource tableViewLunaHomesteadInsertionRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnManagerRow}"
          TargetType="local:ColumnManagerRow"
          BasedOn="{StaticResource tableViewLunaHomesteadColumnManagerRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:StatRow}"
          TargetType="local:StatRow"
          BasedOn="{StaticResource tableViewLunaHomesteadStatRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FilterRow}"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource tableViewLunaHomesteadFilterRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FlexibleRow}"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource tableViewLunaHomesteadFlexibleRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:Cell}"
          TargetType="local:Cell"
          BasedOn="{StaticResource tableViewLunaHomesteadCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataCell}"
          TargetType="local:DataCell"
          BasedOn="{StaticResource tableViewLunaHomesteadDataCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:InsertionCell}"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource tableViewLunaHomesteadInsertionCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnManagerCell}"
          TargetType="local:ColumnManagerCell"
          BasedOn="{StaticResource tableViewLunaHomesteadColumnManagerCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:StatCell}"
          TargetType="local:StatCell"
          BasedOn="{StaticResource tableViewLunaHomesteadStatCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FilterCell}"
          TargetType="local:FilterCell"
          BasedOn="{StaticResource tableViewLunaHomesteadFilterCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FlexibleCell}"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource tableViewLunaHomesteadFlexibleCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupByControl}"
          TargetType="local:GroupByControl"
          BasedOn="{StaticResource tableViewLunaHomesteadGroupByControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupByItem}"
          TargetType="local:GroupByItem"
          BasedOn="{StaticResource tableViewLunaHomesteadGroupByItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupHeaderControl}"
          TargetType="local:GroupHeaderControl"
          BasedOn="{StaticResource tableViewLunaHomesteadGroupHeaderControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupLevelIndicator}"
          TargetType="local:GroupLevelIndicator"
          BasedOn="{StaticResource tableViewLunaHomesteadGroupLevelIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DetailIndicator}"
          TargetType="local:DetailIndicator"
          BasedOn="{StaticResource tableViewLunaHomesteadDetailIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupLevelIndicatorPane}"
          TargetType="local:GroupLevelIndicatorPane"
          BasedOn="{StaticResource tableViewLunaHomesteadGroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:HierarchicalGroupLevelIndicatorPane}"
          TargetType="local:HierarchicalGroupLevelIndicatorPane"
          BasedOn="{StaticResource tableViewLunaHomesteadHierarchicalGroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:AutoFilterControl}"
          TargetType="local:AutoFilterControl"
          BasedOn="{StaticResource tableViewLunaHomesteadAutoFilterControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ScrollTip}"
          TargetType="local:ScrollTip"
          BasedOn="{StaticResource tableViewLunaHomesteadScrollTipStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:HierarchicalGroupByControlNode}"
          TargetType="local:HierarchicalGroupByControlNode"
          BasedOn="{StaticResource tableViewLunaHomesteadHierarchicalGroupByControlNodeStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:HierarchicalGroupByControl}"
          TargetType="local:HierarchicalGroupByControl"
          BasedOn="{StaticResource tableViewLunaHomesteadHierarchicalGroupByControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:HierarchicalGroupByItem}"
          TargetType="local:HierarchicalGroupByItem"
          BasedOn="{StaticResource tableViewLunaHomesteadHierarchicalGroupByItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnChooserContextMenu}"
          TargetType="local:ColumnChooserContextMenu"
          BasedOn="{StaticResource tableViewLunaHomesteadColumnChooserContextMenuStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TableView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnChooserControl}"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource tableViewLunaHomesteadColumnChooserControlStyle}" />
   
</ResourceDictionary>
