<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2015 Xceed Software Inc.

  [TreeGridflowView.Aero.normalcolor.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdp="http://schemas.xceed.com/wpf/xaml/datagrid"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters">

   <ResourceDictionary.MergedDictionaries>

      <!-- Include the view independant and color-scheme independant theme resources -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Aero.Resources.xaml" />

      <!-- Include the view dependant and color-scheme independant theme graphics -->
      <markup:DataGridThemeResourceDictionary Source="Resources/TableView.Aero.Graphics.xaml" />

      <!-- Include the view independant and color-scheme dependant theme resources -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Aero.normalcolor.Resources.xaml" />

      <!-- Include the standard grid element templates -->
      <markup:DataGridThemeResourceDictionary Source="../Common/TreeGridflowView.GridElementTemplates.xaml" />

   </ResourceDictionary.MergedDictionaries>

   <!-- =================================================================== -->
   <!-- Resources specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <conv:NullToBooleanConverter x:Key="nullToBooleanConverter" />
   <conv:ThicknessConverter x:Key="thicknessConverter" />
   <conv:ThicknessConverter x:Key="inverseThicknessConverter"
                            InverseValue="True" />
   <conv:IntAdditionConverter x:Key="intAdditionConverter" />
   <conv:SortingDirectionToBooleanConverter x:Key="sortingDirectionToBooleanConverter" />
   <conv:TypeToVisibilityConverter x:Key="notDetailConfigConverter"
                                   Visibility="Visible"
                                   SetVisibilityWhenTrue="False" />
   <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

   <SolidColorBrush x:Key="hotRowBorderBrush"
                    Color="#CDEFFE" />

   <SolidColorBrush x:Key="warningBackgroundBrush"
                    Color="#FFC400" />

   <SolidColorBrush x:Key="warningForegroundBrush"
                    Color="Black" />

   <LinearGradientBrush x:Key="hotOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

      <GradientStop Offset="0"
                    Color="#F8FCFD" />

      <GradientStop Offset="1"
                    Color="#EFF8FD" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="hotInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

      <GradientStop Offset="1"
                    Color="#F3FAFD" />

      <GradientStop Offset="0"
                    Color="#E2F3FC" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="selectionRowBorderBrush"
                    Color="#99DEFD" />

   <LinearGradientBrush x:Key="selectionOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

      <GradientStop Offset="0"
                    Color="#E7F5FD" />

      <GradientStop Offset="1"
                    Color="#F6FBFD" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="selectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

      <GradientStop Offset="1"
                    Color="#F1F8FD" />

      <GradientStop Offset="0"
                    Color="#D5EFFC" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="inactiveSelectionRowBorderBrush"
                    Color="#D9D9D9" />

   <LinearGradientBrush x:Key="inactiveSelectionOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

      <GradientStop Offset="0"
                    Color="#FAFAFB" />

      <GradientStop Offset="1"
                    Color="#F0F0F0" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="inactiveSelectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

      <GradientStop Offset="1"
                    Color="#F8F8F8" />

      <GradientStop Offset="0"
                    Color="#E5E5E5" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="hotSelectionRowBorderBrush"
                    Color="#B6E6FB" />

   <LinearGradientBrush x:Key="hotSelectionOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

      <GradientStop Offset="0"
                    Color="#F2F9FD" />

      <GradientStop Offset="1"
                    Color="#DEF1FC" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="hotSelectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

      <GradientStop Offset="1"
                    Color="#E8F6FD" />

      <GradientStop Offset="0"
                    Color="#C4E8FA" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="verticalHeaderBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#FFFFFF" />

      <GradientStop Offset="1"
                    Color="#F0F1F4" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="horizontalHeaderBackgroundBrush"
                        StartPoint="0.5,0.99074"
                        EndPoint="0.5,0.0370377">

      <GradientStop Offset="0.589"
                    Color="#F1F2F4" />

      <GradientStop Offset="0.609"
                    Color="#FFFFFF" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="headerForegroundBrush"
                    Color="Black" />

   <SolidColorBrush x:Key="rowSelectorBorderBrush"
                    Color="#D5D5D5" />

   <SolidColorBrush x:Key="rowSelectorDelimiterBorderBrush"
                    Color="#FCFCFD" />

   <LinearGradientBrush x:Key="rowSelectorBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#FFFFFF" />

      <GradientStop Offset="1"
                    Color="#F0F1F4" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="rowSelectorHotBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#F2F9FC" />
      <GradientStop Offset="0.956"
                    Color="#DDEEF7" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="rowSelectorPressedBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

      <GradientStop Offset="0"
                    Color="#AACEE1" />

      <GradientStop Offset="1"
                    Color="#8BD0F5" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="columnManagerCellBorderBrush"
                        StartPoint="0.482673,0.99074"
                        EndPoint="0.482673,0.0370377">

      <GradientStop Offset="0"
                    Color="#D5D5D5" />

      <GradientStop Offset="0.029"
                    Color="#D5D5D5" />

      <GradientStop Offset="0.0498"
                    Color="#DEDFE1" />

      <GradientStop Offset="0.585"
                    Color="#DEDFE1" />

      <GradientStop Offset="0.604"
                    Color="#F2F2F2" />

      <GradientStop Offset="1"
                    Color="#F2F2F2" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="columnManagerCellDelimiterBorderBrush"
                    Color="White" />

   <LinearGradientBrush x:Key="columnManagerCellBackgroundBrush"
                        StartPoint="0.482673,0.99074"
                        EndPoint="0.482673,0.0370377">

      <GradientStop Offset="0"
                    Color="#F1F2F4" />

      <GradientStop Offset="0.589"
                    Color="#F1F2F4" />

      <GradientStop Offset="0.609"
                    Color="#FFFFFF" />

      <GradientStop Offset="1"
                    Color="#FFFFFF" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="columnManagerCellHotBorderBrush"
                    Color="#96D9F9" />

   <LinearGradientBrush x:Key="columnManagerCellHotBackgroundBrush"
                        StartPoint="0.483,0.99"
                        EndPoint="0.483,0.037">

      <GradientStop Offset="0"
                    Color="#DDEEF7" />

      <GradientStop Offset="0.589"
                    Color="#DDEEF7" />

      <GradientStop Offset="0.609"
                    Color="#F2F9FC" />

      <GradientStop Offset="1"
                    Color="#F2F9FC" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="columnManagerCellPressedBorderBrush"
                        StartPoint="0.483,0.991"
                        EndPoint="0.483,0.037">

      <GradientStop Offset="0"
                    Color="#93C9E3" />

      <GradientStop Offset="0.0292"
                    Color="#93C9E3" />

      <GradientStop Offset="0.0498"
                    Color="#69BBE3" />

      <GradientStop Offset="0.585"
                    Color="#69BBE3" />

      <GradientStop Offset="0.604"
                    Color="#88CBEB" />

      <GradientStop Offset="1"
                    Color="#88CBEB" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="columnManagerCellPressedBackgroundBrush"
                        StartPoint="0.482,0.990"
                        EndPoint="0.483,0.037">

      <GradientStop Offset="0"
                    Color="#BCECFE" />

      <GradientStop Offset="0.589"
                    Color="#BCECFE" />

      <GradientStop Offset="0.609"
                    Color="#E3F7FF" />

      <GradientStop Offset="1"
                    Color="#E3F7FF" />

   </LinearGradientBrush>

   <SolidColorBrush x:Key="groupByControlForegroundBrush"
                    Color="White" />

   <Pen x:Key="groupByConnectionLinePen"
        Thickness="2"
        Pen.Brush="White" />

   <!-- =================================================================== -->
   <!-- Templates specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <!--**************************
    * TEMPLATE: GroupNavigationControl
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewGroupNavigationControlTemplate"
                    TargetType="{x:Type local:GroupNavigationControl}">

      <Grid>
         <Border x:Name="outlineBorder"
                 BorderBrush="#FF03395B"
                 BorderThickness="1"
                 Background="#00FFFFFF"
                 CornerRadius="4"
                 Opacity="0" />
         <Border x:Name="innerBorder"
                 BorderBrush="#CC82B9D8"
                 BorderThickness="1"
                 CornerRadius="3"
                 Margin="1"
                 Opacity="0" />

         <Grid>
            <Grid.ColumnDefinitions>
               <!-- Button part -->
               <ColumnDefinition Width="*" />

               <!-- Seperator part -->
               <ColumnDefinition Width="Auto" />

               <!-- Toggle button part -->
               <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Button x:Name="PART_Button"
                    Command="local:GroupNavigationButton.NavigateToGroup"
                    CommandParameter="{TemplateBinding Group}"
                    Content="{TemplateBinding Group}"
                    ContentTemplate="{TemplateBinding MainItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding MainItemTemplateSelector}"
                    Foreground="{TemplateBinding Foreground}"
                    Focusable="False"
                    Grid.Column="0">
               <Button.Template>
                  <ControlTemplate TargetType="{x:Type Button}">
                     <Border Background="Transparent">
                        <ContentPresenter Margin="4,2,4,2" />
                     </Border>
                  </ControlTemplate>
               </Button.Template>
            </Button>

            <Border x:Name="seperator"
                    Grid.Column="1"
                    BorderThickness="0,0,1,0"
                    BorderBrush="#CC82B9D8"
                    Margin="0,4"
                    Visibility="Hidden" />

            <ToggleButton x:Name="PART_ToggleButton"
                          Focusable="False"
                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                          Grid.Column="2"
                          Foreground="{TemplateBinding Foreground}">
               <ToggleButton.Template>
                  <ControlTemplate>
                     <Border x:Name="toggleButtonBackground"
                             CornerRadius="0,6,6,0"
                             Background="Transparent">
                        <Path x:Name="Arrow"
                              Fill="{TemplateBinding Foreground}"
                              Margin="7,1,7,1"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="M 0 0 L 4 4 L 0 8 Z"
                              Opacity="0.3" />
                     </Border>

                     <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsMouseOver"
                                 Value="True">
                           <Setter TargetName="Arrow"
                                   Property="Opacity"
                                   Value="1" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                           <Setter TargetName="Arrow"
                                   Property="Opacity"
                                   Value="1" />
                           <Setter TargetName="Arrow"
                                   Property="Margin"
                                   Value="5,1,5,1" />
                           <Setter TargetName="Arrow"
                                   Property="Data"
                                   Value="M 0 0 L 4 4 L 8 0 Z" />
                        </Trigger>
                     </ControlTemplate.Triggers>
                  </ControlTemplate>
               </ToggleButton.Template>
            </ToggleButton>
         </Grid>

         <Popup x:Name="PART_Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                AllowsTransparency="True"
                Focusable="False"
                PopupAnimation="Slide">
            <Grid SnapsToDevicePixels="True"
                  MinWidth="{TemplateBinding ActualWidth}"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
               <Border Background="White"
                       BorderBrush="Black"
                       BorderThickness="1"
                       TextElement.Foreground="Black">
                  <ScrollViewer CanContentScroll="True"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Auto">
                     <!--<ItemsPresenter />-->
                     <VirtualizingStackPanel IsItemsHost="True" />
                  </ScrollViewer>
               </Border>
            </Grid>
         </Popup>
      </Grid>

      <ControlTemplate.Triggers>
         <Trigger Property="IsMouseOver"
                  Value="True">
            <Setter TargetName="outlineBorder"
                    Property="Opacity"
                    Value="1" />
            <Setter TargetName="innerBorder"
                    Property="Opacity"
                    Value="1" />
            <Setter TargetName="seperator"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>

         <Trigger Property="IsDropDownOpen"
                  Value="True">
            <Setter TargetName="outlineBorder"
                    Property="Opacity"
                    Value="1" />
            <Setter TargetName="innerBorder"
                    Property="Opacity"
                    Value="1" />
            <Setter TargetName="seperator"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>

         <Trigger Property="IsEnabled"
                  Value="False">
            <Setter Property="Opacity"
                    TargetName="outlineBorder"
                    Value="0" />
            <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="0" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupNavigationButton
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewGroupNavigationButtonTemplate"
                    TargetType="{x:Type local:GroupNavigationButton}">
      <Grid>
         <Border x:Name="outerBorder"
                 BorderBrush="#FF03395B"
                 BorderThickness="1"
                 Background="#00FFFFFF"
                 CornerRadius="4"
                 Opacity="0" />
         <Border x:Name="innerBorder"
                 BorderBrush="#CC82B9D8"
                 BorderThickness="1"
                 CornerRadius="3"
                 Margin="1"
                 Opacity="0" />

         <ContentPresenter Margin="4,2,4,2" />
      </Grid>
      <ControlTemplate.Triggers>
         <Trigger Property="IsMouseOver"
                  Value="True">
            <Setter Property="Opacity"
                    TargetName="outerBorder"
                    Value="1" />
            <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="1" />
         </Trigger>
         <Trigger Property="IsEnabled"
                  Value="False">
            <Setter Property="Opacity"
                    TargetName="outerBorder"
                    Value="0" />
            <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="0" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: RowSelector 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewRowSelectorTemplate"
                    TargetType="local:RowSelector">

      <!-- This Grid is used to position the resizer Thumb over the RowSelector -->
      <Grid>

         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

            <Grid>
               <Viewbox MaxHeight="16"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                  <ContentPresenter x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
               </Viewbox>

               <!-- This is the two white lines we see at top and bottom of the RowSelector Item. More visible on MouseOver -->
               <Border BorderThickness="0,1,0,1"
                       Margin="0,1,0,0"
                       BorderBrush="{StaticResource rowSelectorDelimiterBorderBrush}"
                       Opacity="0.4" />

            </Grid>
         </Border>

         <!-- Thumb that is used to resize the Row. -->
         <Thumb x:Name="PART_RowResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                VerticalAlignment="Bottom" />

      </Grid>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource rowSelectorHotBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource rowSelectorPressedBackgroundBrush}" />

         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Row 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewRowTemplate"
                    TargetType="local:Row">

      <Grid x:Name="rootGrid">
         <Border x:Name="outerBackground"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 views:TableView.CanScrollHorizontally="False" />

         <Border x:Name="rowBorder"
                 BorderThickness="1"
                 CornerRadius="3"
                 views:TableView.CanScrollHorizontally="False">
            <Border x:Name="innerBackground"
                    BorderThickness="1"
                    CornerRadius="2" />
         </Border>

         <Decorator x:Name="fixedColumnSplitterIndent">
            <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
            <views:FixedCellPanel x:Name="PART_CellsHost"
                                  ColumnStretchMinWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMinWidth}"
                                  ColumnStretchMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMode}"
                                  FixedCellCount="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay}"
                                  SplitterStyle="{TemplateBinding views:TableView.FixedColumnSplitterStyle}"
                                  SplitterWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnSplitterWidth}"
                                  ShowSplitter="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                                  FixedColumnDropMarkPen="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnDropMarkPen}"
                                  Margin="{TemplateBinding BorderThickness}" />
         </Decorator>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- This trigger is used to display Mouse Over look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}"
                          Value="Row" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <!-- When the FixedColumnCount is 0, do not display the FixedColumn splitter in the Row Template, it will be displayed
              in the margin of the ColumnManagerRow instead -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnCount}"
                          Value="0" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="fixedColumnSplitterIndent"
                    Property="Margin"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnSplitterWidth, Converter={StaticResource thicknessConverter}, ConverterParameter='Left'}" />
            <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />

         </MultiDataTrigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: DataRow 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewDataRowTemplate"
                    TargetType="local:DataRow">

      <Grid x:Name="rootGrid">
         <Border x:Name="outerBackground"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 views:TableView.CanScrollHorizontally="False" />

         <Border x:Name="rowBorder"
                 BorderThickness="1"
                 CornerRadius="3"
                 views:TableView.CanScrollHorizontally="False">
            <Border x:Name="innerBackground"
                    BorderThickness="1"
                    CornerRadius="2" />
         </Border>

         <Decorator x:Name="fixedColumnSplitterIndent">
            <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
            <views:FixedCellPanel x:Name="PART_CellsHost"
                                  ColumnStretchMinWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMinWidth}"
                                  ColumnStretchMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMode}"
                                  FixedCellCount="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay}"
                                  SplitterStyle="{TemplateBinding views:TableView.FixedColumnSplitterStyle}"
                                  SplitterWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnSplitterWidth}"
                                  ShowSplitter="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                                  FixedColumnDropMarkPen="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnDropMarkPen}"
                                  Margin="{TemplateBinding BorderThickness}" />
         </Decorator>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- This trigger is used to display the Active Selection look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
            <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource selectionOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource selectionInnerRowBackgroundBrush}" />
            <Setter TargetName="rootGrid"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- This trigger is used to display the Inactive Selection look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />
            <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />
            <Setter TargetName="rootGrid"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <!-- This trigger is used to display Mouse Over look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}"
                          Value="Row" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <!-- This trigger is used to display Mouse Over + Selected look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}"
                          Value="Row" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotSelectionRowBorderBrush}" />
            <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <!-- When the FixedColumnCount is 0, do not display the FixedColumn splitter in the Row Template, it will be displayed
              in the margin of the ColumnManagerRow instead -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnCount}"
                          Value="0" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="fixedColumnSplitterIndent"
                    Property="Margin"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnSplitterWidth, Converter={StaticResource thicknessConverter}, ConverterParameter='Left'}" />
            <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />

         </MultiDataTrigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerRow 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewColumnManagerRowTemplate"
                    TargetType="local:ColumnManagerRow">

      <Grid x:Name="rootGrid">
         <Border x:Name="rootBorder"
                 views:TableView.CanScrollHorizontally="False"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}" />

         <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
         <views:FixedCellPanel x:Name="PART_CellsHost"
                               ColumnStretchMinWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMinWidth}"
                               ColumnStretchMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnStretchMode}"
                               FixedCellCount="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay}"
                               SplitterStyle="{TemplateBinding views:TableView.FixedColumnSplitterStyle}"
                               SplitterWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnSplitterWidth}"
                               ShowSplitter="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                               FixedColumnDropMarkPen="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FixedColumnDropMarkPen}"
                               Margin="{TemplateBinding BorderThickness}" />
      </Grid>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Cell 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewCellTemplate"
                    TargetType="local:Cell">

      <Grid>
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
               <Border x:Name="cellBorder"
                       BorderThickness="1"
                       CornerRadius="3"
                       Visibility="Collapsed">
                  <Border x:Name="innerBackground"
                          BorderThickness="1"
                          CornerRadius="2" />
               </Border>

               <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Margin="{TemplateBinding Padding}" />
            </Grid>
         </Border>

         <Border x:Name="currentBorder"
                 BorderBrush="Transparent"
                 BorderThickness="1" />

      </Grid>

      <ControlTemplate.Triggers>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="False" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="True" />
               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                      Value="Cell">

            <Setter TargetName="cellBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="currentBorder"
                    Property="Visibility"
                    Value="Collapsed" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <ControlTemplate x:Key="treeGridflowViewCellMainTemplate"
                    TargetType="local:Cell">

      <Grid>
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <!-- MasterDetail ToggleButton -->
            <ColumnDefinition Width="Auto" />

            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0"
                                                    views:TableView.CanScrollHorizontally="False" />

         <!-- Space reserved for alignment with data cells. -->
         <ContentPresenter x:Name="detailsToggle"
                           Grid.Column="1"
                           Content="{x:Null}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ExpandGroupGlyph}"
                           VerticalAlignment="Top"
                           Margin="2,4,2,0"
                           OverridesDefaultStyle="True"
                           Focusable="False"
                           Visibility="Collapsed" />

         <Grid Grid.Column="2">
            <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">
               <Grid>
                  <Border x:Name="cellBorder"
                          Grid.Column="2"
                          BorderThickness="1"
                          CornerRadius="3"
                          Visibility="Collapsed">
                     <Border x:Name="innerBackground"
                             BorderThickness="1"
                             CornerRadius="2" />
                  </Border>

                  <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" />
               </Grid>
            </Border>

            <Border x:Name="currentBorder"
                    BorderBrush="Transparent"
                    BorderThickness="1" />
         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="False" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="True" />
               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                      Value="Cell">

            <Setter TargetName="cellBorder"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="currentBorder"
                    Property="Visibility"
                    Value="Collapsed" />

         </DataTrigger>

         <!-- This trigger is used to display Mouse Over look -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowDetailToggle}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: DataCell 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewDataCellTemplate"
                    TargetType="local:DataCell">

      <Grid>
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
               <Border x:Name="cellBorder"
                       BorderThickness="1"
                       CornerRadius="3"
                       Visibility="Collapsed">
                  <Border x:Name="innerBackground"
                          BorderThickness="1"
                          CornerRadius="2" />
               </Border>

               <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Margin="{TemplateBinding Padding}" />
            </Grid>
         </Border>

         <Border x:Name="currentBorder"
                 BorderBrush="Transparent"
                 BorderThickness="1" />

      </Grid>

      <ControlTemplate.Triggers>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="False" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="True" />
               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                      Value="Cell">

            <Setter TargetName="cellBorder"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="currentBorder"
                    Property="Visibility"
                    Value="Collapsed" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotSelectionRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource selectionOuterRowBackgroundBrush}" />
            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionForeground}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <ControlTemplate x:Key="treeGridflowViewDataCellMainTemplate"
                    TargetType="local:DataCell">

      <Grid>
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />

            <!-- MasterDetail ToggleButton -->
            <ColumnDefinition Width="Auto" />

            <!-- CellContentPresenter -->
            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0"
                                                    views:TableView.CanScrollHorizontally="False" />

         <Button x:Name="detailsToggle"
                 Grid.Column="1"
                 Template="{StaticResource detailsExpanderButtonTemplate}"
                 VerticalAlignment="Top"
                 Margin="2,4,2,0"
                 OverridesDefaultStyle="True"
                 Focusable="False"
                 Visibility="Collapsed" />

         <Grid Grid.Column="2">
            <Border x:Name="rootBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
               <Grid>

                  <Border x:Name="cellBorder"
                          BorderThickness="1"
                          CornerRadius="3"
                          Visibility="Collapsed">
                     <Border x:Name="innerBackground"
                             BorderThickness="1"
                             CornerRadius="2" />
                  </Border>

                  <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                              Grid.Column="2"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" />
               </Grid>
            </Border>

            <Border x:Name="currentBorder"
                    BorderBrush="Transparent"
                    BorderThickness="1" />

         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="False" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsCurrent"
                          Value="True" />
               <Condition Property="HasValidationError"
                          Value="True" />
               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />
            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                      Value="Cell">

            <Setter TargetName="cellBorder"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="currentBorder"
                    Property="Visibility"
                    Value="Collapsed" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).SelectionUnit}"
                          Value="Cell" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotSelectionRowBorderBrush}" />
            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource hotSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionInnerRowBackgroundBrush}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource selectionOuterRowBackgroundBrush}" />
            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionForeground}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionOuterRowBackgroundBrush}" />
            <Setter TargetName="cellBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />
            <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionBackground}" />
            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowDetailToggle}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden" />

         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HasDetails}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowDetailToggle}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <!--# case 159723: The command should be set only when the button is visible to improve performance. -->
            <Setter TargetName="detailsToggle"
                    Property="Command"
                    Value="{x:Static local:DataGridCommands.ToggleDetailExpansion}" />

            <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Visible" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
   <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

      <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

         <Grid Width="16"
               Background="Transparent"
               HorizontalAlignment="Center">

            <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}" />

            <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

            </ContentPresenter>
         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

            <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}" />

         </DataTrigger>

         <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterCell 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewFilterCellTemplate"
                    TargetType="local:FilterCell">
      <Grid>
         <Grid x:Name="disabledPatern"
               Visibility="Collapsed">
            <Border>
               <Border.Background>
                  <LinearGradientBrush EndPoint="0.5,1"
                                       StartPoint="0.5,0">
                     <GradientStop Color="#E9EAED"
                                   Offset="1" />
                     <GradientStop Color="DarkGray" />
                  </LinearGradientBrush>
               </Border.Background>
            </Border>
            <Border Opacity="0.08">
               <Border.Background>
                  <LinearGradientBrush StartPoint="-0.015,0.1"
                                       EndPoint="9.187,9.236"
                                       SpreadMethod="Repeat"
                                       MappingMode="Absolute">
                     <GradientStop Offset="0"
                                   Color="Transparent" />
                     <GradientStop Color="Transparent"
                                   Offset="0.5" />
                     <GradientStop Offset="0.5"
                                   Color="White" />
                     <GradientStop Offset="1"
                                   Color="White" />
                  </LinearGradientBrush>
               </Border.Background>
            </Border>
         </Grid>

         <Border x:Name="gridLinesBorder" />
         <Grid>
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
               <Grid>
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition />
                     <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>

                  <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                  <Button x:Name="clearFilterButton"
                          Focusable="False"
                          Command="local:DataGridCommands.ClearFilter"
                          Cursor="Hand"
                          Visibility="Collapsed"
                          Grid.Column="1"
                          Margin="0,2,2,0"
                          VerticalAlignment="Top"
                          Template="{StaticResource clearFilterButtonTemplate}" />
               </Grid>
            </Border>
         </Grid>

      </Grid>

      <ControlTemplate.Triggers>
         <Trigger Property="ContentTemplate"
                  Value="{x:Null}">

            <Setter TargetName="disabledPatern"
                    Property="Visibility"
                    Value="Visible" />

         </Trigger>

         <!-- Show the ClearFilter Button if there is a filter value and the 
              ClearFilterButtonVisibility is set to Auto. -->
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="HasFilter"
                          Value="True" />

               <Condition Property="local:FilterCell.ClearFilterButtonVisibility"
                          Value="Auto" />
            </MultiTrigger.Conditions>

            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AreColumnsBeingReordered}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="gridLinesBorder"
                    Property="BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

            <Setter TargetName="gridLinesBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Left'}" />

            <Setter TargetName="gridLinesBorder"
                    Property="Margin"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource inverseThicknessConverter},ConverterParameter='Left'}" />

         </MultiDataTrigger>

         <!-- Show the ClearFilter Button if the ClearFilterButtonVisibility is set to Always. -->
         <Trigger Property="local:FilterCell.ClearFilterButtonVisibility"
                  Value="Always">
            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <ControlTemplate x:Key="treeGridflowViewFilterCellMainTemplate"
                    TargetType="local:FilterCell">

      <Grid>
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <!-- MasterDetail ToggleButton -->
            <ColumnDefinition Width="Auto" />

            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0"
                                                    views:TableView.CanScrollHorizontally="False" />

         <!-- Space reserved for alignment with data cells. -->
         <ContentPresenter x:Name="detailsToggle"
                           Grid.Column="1"
                           Content="{x:Null}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ExpandGroupGlyph}"
                           VerticalAlignment="Top"
                           Margin="2,4,2,0"
                           OverridesDefaultStyle="True"
                           Focusable="False"
                           Visibility="Collapsed" />

         <Grid Grid.Column="2">
            <Grid x:Name="disabledPatern"
                  Visibility="Collapsed">
               <Border>
                  <Border.Background>
                     <LinearGradientBrush EndPoint="0.5,1"
                                          StartPoint="0.5,0">
                        <GradientStop Color="#E9EAED"
                                      Offset="1" />
                        <GradientStop Color="DarkGray" />
                     </LinearGradientBrush>
                  </Border.Background>
               </Border>
               <Border Opacity="0.08">
                  <Border.Background>
                     <LinearGradientBrush StartPoint="-0.015,0.1"
                                          EndPoint="9.187,9.236"
                                          SpreadMethod="Repeat"
                                          MappingMode="Absolute">
                        <GradientStop Offset="0"
                                      Color="Transparent" />
                        <GradientStop Color="Transparent"
                                      Offset="0.5" />
                        <GradientStop Offset="0.5"
                                      Color="White" />
                        <GradientStop Offset="1"
                                      Color="White" />
                     </LinearGradientBrush>
                  </Border.Background>
               </Border>
            </Grid>

            <Border x:Name="gridLinesBorder" />
            <Grid>
               <Border Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Padding="{TemplateBinding Padding}">
                  <Grid>
                     <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                     </Grid.ColumnDefinitions>

                     <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                     <Button x:Name="clearFilterButton"
                             Focusable="False"
                             Command="local:DataGridCommands.ClearFilter"
                             Cursor="Hand"
                             Visibility="Collapsed"
                             Grid.Column="1"
                             Margin="0,2,2,0"
                             VerticalAlignment="Top"
                             Template="{StaticResource clearFilterButtonTemplate}" />
                  </Grid>
               </Border>
            </Grid>

         </Grid>
      </Grid>

      <ControlTemplate.Triggers>
         <Trigger Property="ContentTemplate"
                  Value="{x:Null}">

            <Setter TargetName="disabledPatern"
                    Property="Visibility"
                    Value="Visible" />

         </Trigger>

         <!-- Show the ClearFilter Button if there is a filter value and the 
              ClearFilterButtonVisibility is set to Auto. -->
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="HasFilter"
                          Value="True" />

               <Condition Property="local:FilterCell.ClearFilterButtonVisibility"
                          Value="Auto" />
            </MultiTrigger.Conditions>

            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AreColumnsBeingReordered}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="gridLinesBorder"
                    Property="BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

            <Setter TargetName="gridLinesBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Left'}" />

            <Setter TargetName="gridLinesBorder"
                    Property="Margin"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource inverseThicknessConverter},ConverterParameter='Left'}" />

         </MultiDataTrigger>

         <!-- Show the ClearFilter Button if the ClearFilterButtonVisibility is set to Always. -->
         <Trigger Property="local:FilterCell.ClearFilterButtonVisibility"
                  Value="Always">
            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowDetailToggle}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewColumnManagerCellTemplate"
                    TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
         </Style>
      </ControlTemplate.Resources>

      <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
      <Grid>

         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

            <DockPanel>

               <Grid>

                  <DockPanel Margin="{TemplateBinding Padding}">

                     <StackPanel Orientation="Horizontal"
                                 DockPanel.Dock="Top"
                                 HorizontalAlignment="Center">
                        <ContentPresenter x:Name="sortGlyphPresenter"
                                          Content="{x:Null}"
                                          ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                          VerticalAlignment="Top"
                                          Visibility="Hidden" />
                        <ContentPresenter x:Name="sortIndexGlyphPresenter"
                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="Top"
                                          Content="{Binding Path=(local:Cell.ParentCell).ParentColumn.SortIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource intAdditionConverter}, ConverterParameter=1}"
                                          ContentTemplate="{x:Null}"
                                          Margin="3,-1,0,0"
                                          Visibility="Collapsed" />
                     </StackPanel>
                     <Grid>
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition Width="*" />
                           <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <Border x:Name="thumbToggleBackgroundBorder"
                                Grid.Column="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                Background="{StaticResource horizontalHeaderBackgroundBrush}">

                           <ToggleButton x:Name="toggleButton"
                                         Focusable="False"
                                         VerticalAlignment="Stretch"
                                         Visibility="Collapsed"
                                         Margin="2,0,0,0"
                                         Opacity="0.5" />

                        </Border>
                     </Grid>

                  </DockPanel>

                  <Border x:Name="delimiterBorder"
                          BorderThickness="1,0,1,0"
                          BorderBrush="{StaticResource rowSelectorDelimiterBorderBrush}" />

                  <local:AutoFilterPopup x:Name="filterOptions"
                                         PopupAnimation="Slide"
                                         StaysOpen="False"
                                         AllowsTransparency="True"
                                         PlacementTarget="{Binding ElementName=toggleButton}">

                     <local:AutoFilterControl x:Name="autoFilterControl"
                                              Background="White"
                                              BorderBrush="Black"
                                              BorderThickness="1"
                                              AutoFilterColumn="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn}"
                                              Style="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn.AutoFilterControlStyle}"
                                              TextElement.Foreground="{TemplateBinding TextElement.Foreground}" />
                  </local:AutoFilterPopup>

               </Grid>

            </DockPanel>

         </Border>

         <!-- Thumb that is used to resize the Column. -->
         <Thumb x:Name="PART_ColumnResizerThumbLeft"
                Style="{StaticResource invisibleThumbStyle}"
                HorizontalAlignment="Left" />

         <!-- Thumb that is used to resize the Column. -->
         <Thumb x:Name="PART_ColumnResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                HorizontalAlignment="Right" />

      </Grid>

      <ControlTemplate.Triggers>

         <!-- The following triggers allows the content to correctly align to the center when the mouse is over the ColumnManagerCell and the HorizontalContentAlignment is Center -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Value="Visible"
                          Binding="{Binding ElementName=toggleButton, Path=Visibility}" />
               <Condition Value="Center"
                          Binding="{Binding RelativeSource={RelativeSource Self},
                        Path=HorizontalContentAlignment}" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_CellContentPresenter"
                    Property="Margin"
                    Value="19,0,0,0" />
         </MultiDataTrigger>

         <!-- Trigger related to the filteringToggleButton-->
         <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
         </Trigger>

         <!-- Always visible if filterOptions popup IsOpen -->
         <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

         </Trigger>

         <!-- Display FilterToggleButton Trigger on MouseOver -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

         </MultiDataTrigger>

         <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

         </MultiDataTrigger>

         <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding Path=ParentColumn.SortDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource sortingDirectionToBooleanConverter}}"
                          Value="True" />
               <Condition Binding="{Binding Path=(local:DataGridControl.DataGridContext).ShowSortIndex, RelativeSource={RelativeSource Self}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SortIndexGlyph}" />
         </MultiDataTrigger>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.PreviousVisibleColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <ControlTemplate x:Key="treeGridflowViewColumnManagerCellMainTemplate"
                    TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
         </Style>
      </ControlTemplate.Resources>

      <Grid>
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <!-- MasterDetail ToggleButton -->
            <ColumnDefinition Width="Auto" />

            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0"
                                                    views:TableView.CanScrollHorizontally="False" />

         <!-- Space reserved for alignment with data cells. -->
         <ContentPresenter x:Name="detailsToggle"
                           Grid.Column="1"
                           Content="{x:Null}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ExpandGroupGlyph}"
                           VerticalAlignment="Top"
                           Margin="2,4,2,0"
                           OverridesDefaultStyle="True"
                           Focusable="False"
                           Visibility="Collapsed" />

         <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
         <Grid Grid.Column="2">

            <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

               <DockPanel>

                  <Grid>

                     <DockPanel Margin="{TemplateBinding Padding}">

                        <StackPanel Orientation="Horizontal"
                                    DockPanel.Dock="Top"
                                    HorizontalAlignment="Center">
                           <ContentPresenter x:Name="sortGlyphPresenter"
                                             Content="{x:Null}"
                                             ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                             VerticalAlignment="Top"
                                             Visibility="Hidden" />
                           <ContentPresenter x:Name="sortIndexGlyphPresenter"
                                             TextElement.Foreground="{TemplateBinding Foreground}"
                                             VerticalAlignment="Top"
                                             Content="{Binding Path=(local:Cell.ParentCell).ParentColumn.SortIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource intAdditionConverter}, ConverterParameter=1}"
                                             ContentTemplate="{x:Null}"
                                             Margin="3,-1,0,0"
                                             Visibility="Collapsed" />
                        </StackPanel>
                        <Grid>
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="*" />
                              <ColumnDefinition Width="Auto" />
                           </Grid.ColumnDefinitions>
                           <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                           <Border x:Name="thumbToggleBackgroundBorder"
                                   Grid.Column="1"
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="0"
                                   Background="{StaticResource horizontalHeaderBackgroundBrush}">

                              <ToggleButton x:Name="toggleButton"
                                            Focusable="False"
                                            VerticalAlignment="Stretch"
                                            Visibility="Collapsed"
                                            Margin="2,0,0,0"
                                            Opacity="0.5" />

                           </Border>
                        </Grid>

                     </DockPanel>

                     <Border x:Name="delimiterBorder"
                             BorderThickness="1,0,1,0"
                             BorderBrush="{StaticResource rowSelectorDelimiterBorderBrush}" />

                     <local:AutoFilterPopup x:Name="filterOptions"
                                            PopupAnimation="Slide"
                                            StaysOpen="False"
                                            AllowsTransparency="True"
                                            PlacementTarget="{Binding ElementName=toggleButton}">

                        <local:AutoFilterControl x:Name="autoFilterControl"
                                                 Background="White"
                                                 BorderBrush="Black"
                                                 BorderThickness="1"
                                                 AutoFilterColumn="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn}"
                                                 Style="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn.AutoFilterControlStyle}"
                                                 TextElement.Foreground="{TemplateBinding TextElement.Foreground}" />
                     </local:AutoFilterPopup>

                  </Grid>

               </DockPanel>

            </Border>

            <!-- Thumb that is used to resize the Column. -->
            <Thumb x:Name="PART_ColumnResizerThumbLeft"
                   Style="{StaticResource invisibleThumbStyle}"
                   HorizontalAlignment="Left" />

            <!-- Thumb that is used to resize the Column. -->
            <Thumb x:Name="PART_ColumnResizerThumb"
                   Style="{StaticResource invisibleThumbStyle}"
                   HorizontalAlignment="Right" />

         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- The following triggers allows the content to correctly align to the center when the mouse is over the ColumnManagerCell and the HorizontalContentAlignment is Center -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Value="Visible"
                          Binding="{Binding ElementName=toggleButton, Path=Visibility}" />
               <Condition Value="Center"
                          Binding="{Binding RelativeSource={RelativeSource Self},
                        Path=HorizontalContentAlignment}" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_CellContentPresenter"
                    Property="Margin"
                    Value="19,0,0,0" />
         </MultiDataTrigger>

         <!-- Trigger related to the filteringToggleButton-->
         <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
         </Trigger>

         <!-- Always visible if filterOptions popup IsOpen -->
         <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

         </Trigger>

         <!-- Display FilterToggleButton Trigger on MouseOver -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

         </MultiDataTrigger>

         <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

         </MultiDataTrigger>

         <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding Path=ParentColumn.SortDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource sortingDirectionToBooleanConverter}}"
                          Value="True" />
               <Condition Binding="{Binding Path=(local:DataGridControl.DataGridContext).ShowSortIndex, RelativeSource={RelativeSource Self}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SortIndexGlyph}" />
         </MultiDataTrigger>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellPressedBorderBrush}" />

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

            <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

            <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.PreviousVisibleColumn.HasFixedWidth}"
                          Value="True" />

               <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
            <Setter TargetName="PART_ColumnResizerThumbLeft"
                    Property="IsEnabled"
                    Value="False" />
         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowDetailToggle}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupHeaderControl
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewGroupHeaderControlTemplate"
                    TargetType="local:GroupHeaderControl">

      <!-- Using this decorator will prevent the GroupHeaderControl of exceeding the width 
           defined by the grid's column. -->
      <views:PassiveLayoutDecorator Axis="Horizontal">
         <!-- This DockPanel is used to layout the GroupLevelIndicatorPane placeholder and the GroupHeaderControl Content. -->
         <DockPanel>

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
              whenever this GroupHeaderControl is part of a group. -->
            <local:HierarchicalGroupLevelIndicatorPane DockPanel.Dock="Left" />
            <local:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                           Indented="False"
                                           local:GroupLevelIndicatorPane.GroupLevel="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:GroupLevelIndicatorPane.GroupLevel), Converter={StaticResource intAdditionConverter}, ConverterParameter=-1}" />
            <!-- Main Border for the GroupHeaderControl. It is Focusable to make the InputBindings work. -->
            <Border x:Name="mainBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    Focusable="True"
                    FocusVisualStyle="{TemplateBinding FocusVisualStyle}">

               <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
               <Border.InputBindings>
                  <KeyBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                              Key="Space" />

                  <KeyBinding Command="{x:Static local:DataGridCommands.ExpandGroup}"
                              Key="Right" />

                  <KeyBinding Command="{x:Static local:DataGridCommands.ExpandGroup}"
                              Key="Add" />

                  <KeyBinding Command="{x:Static local:DataGridCommands.CollapseGroup}"
                              Key="Left" />

                  <KeyBinding Command="{x:Static local:DataGridCommands.CollapseGroup}"
                              Key="Subtract" />

                  <MouseBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                MouseAction="LeftDoubleClick" />

               </Border.InputBindings>

               <DockPanel>

                  <!-- ToggleButton that is used to expand/collapse the group. -->
                  <ToggleButton DockPanel.Dock="Left"
                                OverridesDefaultStyle="True"
                                Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Group.IsExpanded}" />

                  <!-- ContentPresenter in charge of displaying this GroupHeaderControl's Content, which is
                    a Group by default. -->
                  <ContentPresenter DockPanel.Dock="Left"
                                    Margin="3,0,0,0"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                  <!-- Blue line that is traced across the GroupHeader, following the content -->
                  <Rectangle Fill="#B0BFDE"
                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                             HorizontalAlignment="Stretch"
                             Height="1"
                             Margin="7,0,0,0" />
               </DockPanel>
            </Border>
         </DockPanel>
      </views:PassiveLayoutDecorator>

      <ControlTemplate.Triggers>
         <Trigger Property="local:DataGridControl.NavigationBehavior"
                  Value="None">
            <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False" />
         </Trigger>
         <!-- When the Group is Selected, we want to change its background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=SelectionState}"
                          Value="Selected" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="mainBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="mainBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Group is Selected but the parent DataGridControl is not focused, we want to change
              the Group's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=SelectionState}"
                          Value="Selected" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).IsKeyboardFocusWithin}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).(local:DataGridContext.DataGridControl).HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="mainBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="mainBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupHeaderControl (When top level sticky)
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewGroupHeaderTopLevelStickyControlTemplate"
                    TargetType="local:GroupHeaderControl">

      <!-- Using this decorator will prevent the GroupHeaderControl of exceeding the width 
           defined by the grid's column. -->
      <views:PassiveLayoutDecorator Axis="Horizontal">
         <!-- This DockPanel is used to layout the GroupLevelIndicatorPane placeholder and the GroupHeaderControl Content. -->
         <DockPanel>

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
              whenever this GroupHeaderControl is part of a group. -->
            <local:HierarchicalGroupLevelIndicatorPane DockPanel.Dock="Left" />
            <local:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                           Indented="False"
                                           local:GroupLevelIndicatorPane.GroupLevel="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:GroupLevelIndicatorPane.GroupLevel), Converter={StaticResource intAdditionConverter}, ConverterParameter=-1}" />

            <Grid>
               <Border x:Name="outerBorder"
                       BorderBrush="#FF03395B"
                       BorderThickness="0,1,0,1">
                  <Grid>
                     <Grid.RowDefinitions>
                        <RowDefinition Height="0.5*" />
                        <RowDefinition Height="0.5*" />
                     </Grid.RowDefinitions>
                     <Border Grid.RowSpan="2">
                        <Border.Background>
                           <LinearGradientBrush EndPoint="0,0.5"
                                                StartPoint="1,0.5">
                              <GradientStop Color="#FF196C77"
                                            Offset="0" />
                              <GradientStop Color="#FF065F99"
                                            Offset="1" />
                           </LinearGradientBrush>
                        </Border.Background>
                     </Border>
                     <Border Opacity="0.2"
                             Grid.RowSpan="2">
                        <Border.Background>
                           <LinearGradientBrush EndPoint="0.5,0.5"
                                                StartPoint="0.5,0">
                              <GradientStop Color="#CCFFFFFF"
                                            Offset="1" />
                              <GradientStop Color="#4CFFFFFF"
                                            Offset="1" />
                           </LinearGradientBrush>
                        </Border.Background>
                     </Border>
                  </Grid>
               </Border>

               <!-- Main Border for the GroupHeaderControl. It is Focusable to make the InputBindings work. -->
               <Border x:Name="mainBorder"
                       Background="Transparent"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Padding="{TemplateBinding Padding}"
                       Focusable="True"
                       FocusVisualStyle="{TemplateBinding FocusVisualStyle}">

                  <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
                  <Border.InputBindings>
                     <KeyBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                 Key="Space" />

                     <KeyBinding Command="{x:Static local:DataGridCommands.ExpandGroup}"
                                 Key="Right" />

                     <KeyBinding Command="{x:Static local:DataGridCommands.ExpandGroup}"
                                 Key="Add" />

                     <KeyBinding Command="{x:Static local:DataGridCommands.CollapseGroup}"
                                 Key="Left" />

                     <KeyBinding Command="{x:Static local:DataGridCommands.CollapseGroup}"
                                 Key="Subtract" />

                     <MouseBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                   MouseAction="LeftDoubleClick" />

                  </Border.InputBindings>

                  <DockPanel>

                     <!-- ToggleButton that is used to expand/collapse the group. -->
                     <ToggleButton DockPanel.Dock="Left"
                                   OverridesDefaultStyle="True"
                                   Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Focusable="False"
                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Group.IsExpanded}" />

                     <!-- ContentPresenter in charge of displaying this GroupHeaderControl's Content, which is
                    a Group by default. -->
                     <ContentPresenter DockPanel.Dock="Left"
                                       Margin="3,0,0,0"
                                       TextElement.Foreground="{TemplateBinding Foreground}"
                                       Content="{TemplateBinding Content}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </DockPanel>
               </Border>
            </Grid>
         </DockPanel>
      </views:PassiveLayoutDecorator>

      <ControlTemplate.Triggers>
         <Trigger Property="local:DataGridControl.NavigationBehavior"
                  Value="None">
            <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False" />
         </Trigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FixedColumnSplitter
    ************************** -->
   <ControlTemplate x:Key="columnManagerRowFixedColumnSplitterTemplate"
                    TargetType="views:FixedColumnSplitter">
      <Grid x:Name="SplitterAERO"
            Background="Transparent"
            Width="6"
            Height="20">

         <Border HorizontalAlignment="Left"
                 Margin="0,2,0,2"
                 Width="1"
                 Background="White" />

         <Border Width="1"
                 Background="White"
                 HorizontalAlignment="Right"
                 Margin="0,2,0,2" />

         <Border HorizontalAlignment="Center"
                 Margin="0,6,0,0"
                 VerticalAlignment="Top"
                 Width="2"
                 Height="2"
                 Background="#FF808080" />

         <Border Width="2"
                 Height="2"
                 Background="#FF808080"
                 HorizontalAlignment="Center"
                 VerticalAlignment="Center" />

         <Border Width="2"
                 Height="2"
                 Background="#FF808080"
                 HorizontalAlignment="Center"
                 Margin="0,0,0,6"
                 VerticalAlignment="Bottom" />

         <Border Height="1"
                 Background="#FF808080"
                 Margin="2,3,2,0"
                 VerticalAlignment="Top"
                 Width="2" />

         <Border Height="1"
                 Background="#FF808080"
                 Width="2"
                 Margin="2,0,2,3"
                 VerticalAlignment="Bottom" />

      </Grid>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupByControl
    ************************** -->

   <!-- TreeViewItem Style to avoid displaying Expander and avoid selection and click -->
   <Style x:Key="hierarchicalGroupByControlTreeViewItemStyle"
          TargetType="{x:Type TreeViewItem}">
      <Style.Resources>
         <conv:TreeViewLineConverter x:Key="LineConverter" />
      </Style.Resources>

      <Setter Property="IsExpanded"
              Value="True" />

      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="Visibility">
         <Setter.Value>
            <PriorityBinding>
               <Binding Path="."
                        Converter="{StaticResource notDetailConfigConverter}"
                        ConverterParameter="{x:Type local:DetailConfiguration}" />
               <Binding Path="Visible"
                        Converter="{StaticResource booleanToVisibilityConverter}" />
            </PriorityBinding>

         </Setter.Value>
      </Setter>

      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TreeViewItem}">
               <Grid ShowGridLines="False">
                  <Grid.ColumnDefinitions>

                     <!--This ColumnDefinition is required for stair spacing-->
                     <ColumnDefinition Width="20" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                     <RowDefinition Height="*" />
                     <RowDefinition MaxHeight="1" />
                     <RowDefinition Height="*" />
                     <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>

                  <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                          Padding="{TemplateBinding Control.Padding}"
                          BorderBrush="{TemplateBinding Border.BorderBrush}"
                          Background="{TemplateBinding Panel.Background}"
                          Name="treeViewItemBorder"
                          SnapsToDevicePixels="True"
                          VerticalAlignment="Center"
                          Grid.Column="1"
                          Grid.RowSpan="3">

                     <!--Will contain DetailGroupByConrol-->

                     <ContentPresenter Content="{TemplateBinding HeaderedContentControl.Header}"
                                       ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                       ContentSource="Header"
                                       Name="PART_Header"
                                       HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                       SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                       Margin="2,0,2,0" />
                  </Border>

                  <ItemsPresenter Name="ItemsHost"
                                  Grid.Column="1"
                                  Grid.Row="3"
                                  Grid.ColumnSpan="2" />
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="IsExpanded"
                           Value="false">
                     <Setter TargetName="ItemsHost"
                             Property="Visibility"
                             Value="Collapsed" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <ControlTemplate x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupByControlTemplate"
                    TargetType="local:HierarchicalGroupByControl">
      <ControlTemplate.Resources>
         <!--this style is set to avoid having implicit treeview style
             overide the HierarchicalGroupByControl's TreeView-->
         <Style TargetType="TreeView" />
      </ControlTemplate.Resources>

      <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the HierarchicalGroupByControl -->
      <Grid x:Name="rootGrid">
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <!-- GroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />

            <!-- HierarchicalGroupByControl -->
            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <!-- The border responsible for the visual outline of the row (gridlines and background)
              spans the GroupLevelIndicatorPane and CellsHost Panel. Those 2 elements are not children of
              the Border because we don't want the border to be displayed in the GroupLevelIndicatorPane. -->
         <Border x:Name="rootBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top'}"
                 Padding="{TemplateBinding Padding}" />

         <Border x:Name="verticalGridLineBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

         <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0" />

         <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
         <local:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        Grid.Column="1" />

         <Border BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Grid.Column="2">

            <Grid>
               <Grid>
                  <Grid.RowDefinitions>
                     <RowDefinition Height="0.53*" />
                     <RowDefinition Height="0.27*" />
                     <RowDefinition Height="0.2*" />
                  </Grid.RowDefinitions>

                  <Border Grid.RowSpan="3">
                     <Border.Background>
                        <LinearGradientBrush StartPoint="0,0.5"
                                             EndPoint="1,0.5">
                           <GradientStop Offset="0"
                                         Color="#044875" />
                           <GradientStop Offset="1"
                                         Color="#196C77" />
                        </LinearGradientBrush>
                     </Border.Background>
                  </Border>

                  <Border Grid.Row="2">
                     <Border.Background>
                        <LinearGradientBrush StartPoint="0.5,0"
                                             EndPoint="0.5,1">
                           <GradientStop Offset="0"
                                         Color="#008CC1C6" />
                           <GradientStop Offset="0.5"
                                         Color="#0F85BDC2" />
                           <GradientStop Offset="0.96"
                                         Color="#AE80BBBF" />
                           <GradientStop Offset="1"
                                         Color="#B280BBBF" />
                        </LinearGradientBrush>
                     </Border.Background>
                  </Border>

                  <Border Grid.Row="0">
                     <Border.Background>
                        <LinearGradientBrush StartPoint="0.5,1"
                                             EndPoint="0.5,0">
                           <GradientStop Offset="0"
                                         Color="#26FFFFFF" />
                           <GradientStop Offset="1"
                                         Color="#B1FFFFFF" />
                           <GradientStop Offset="0.643"
                                         Color="#66FFFFFF" />
                        </LinearGradientBrush>
                     </Border.Background>
                  </Border>

                  <!--This element has to be external to avoid being overlapped by the gradients-->
                  <Border Grid.RowSpan="3"
                          BorderThickness="1"
                          BorderBrush="#093442">

                     <Border Grid.RowSpan="3"
                             BorderThickness="1"
                             BorderBrush="#7FFFFFFF" />
                  </Border>

               </Grid>

               <StackPanel Orientation="Horizontal">

                  <TreeView x:Name="PART_HierarchicalGroupByControlTreeView"
                            ItemContainerStyle="{StaticResource hierarchicalGroupByControlTreeViewItemStyle}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            Focusable="False">

                     <TreeViewItem Header="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext)}"
                                   HeaderTemplate="{StaticResource dataGridContextTemplate}"
                                   ItemsSource="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DetailConfigurations}"
                                   ItemTemplate="{StaticResource detailConfigurationTemplate}"
                                   ItemContainerStyle="{StaticResource hierarchicalGroupByControlTreeViewItemStyle}"
                                   IsExpanded="True" />

                  </TreeView>

                  <!-- This ContentPresenter displays the value of the NoGroupContent property
                 of the GroupByControl. This content must only be displayed when there are
                 no groups present, so we set its Visibility to Collapsed by default and
                 it is made visible via a trigger. -->
                  <ContentPresenter x:Name="noGroupContentPresenter"
                                    Content="{TemplateBinding NoGroupContent}"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed"
                                    Margin="5,0,0,0" />

               </StackPanel>
               <!-- The GroupByControl is an ItemsControl, so it must have an ItemsPresenter in its
                 Template in order to layout and show its child items. The default ItemsPanel
                 of the GroupByControl is a "StaircasePanel", which layout its items in a
                 staircase-like pattern and draws connecting lines between the items. -->
               <ItemsPresenter Margin="{TemplateBinding Padding}" />

            </Grid>
         </Border>

      </Grid>
      <ControlTemplate.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasGroups}"
                      Value="True">

            <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:GroupLevelIndicatorPane.GroupLevel)}"
                      Value="-1">
            <Setter TargetName="groupLevelIndicatorPane"
                    Property="Visibility"
                    Value="Collapsed" />
            <Setter TargetName="verticalGridLineBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right, Left'}" />
         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupByControlNode
    ************************** -->
   <ControlTemplate x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupByControlNodeTemplate"
                    TargetType="local:HierarchicalGroupByControlNode">

      <StackPanel Orientation="Horizontal"
                  Background="{TemplateBinding Background}"
                  Margin="0,4,0,4">

         <Grid VerticalAlignment="Top"
               HorizontalAlignment="Center"
               Margin="0,0,0,0">

            <Border x:Name="border1"
                    BorderBrush="#1AFFFFFF"
                    CornerRadius="2"
                    BorderThickness="1">

               <Border x:Name="border2"
                       BorderBrush="#80022841"
                       CornerRadius="2"
                       BorderThickness="1">

                  <Border x:Name="border3"
                          BorderBrush="#34FFFFFF"
                          CornerRadius="2"
                          BorderThickness="1">

                     <TextBlock x:Name="titleTextBlock"
                                Text="{TemplateBinding Title}"
                                Foreground="White"
                                Margin="3,0,3,0" />
                  </Border>
               </Border>
            </Border>
         </Grid>

         <ItemsPresenter Margin="2,0,0,0"
                         VerticalAlignment="Bottom"
                         HorizontalAlignment="Right" />

      </StackPanel>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupByItem 
    ************************** -->
   <ControlTemplate x:Key="aeroNormalColorHierarchicalGroupByItemTemplate"
                    TargetType="local:HierarchicalGroupByItem">

      <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

         <Grid>
            <Border x:Name="border1"
                    BorderBrush="#1AFFFFFF"
                    CornerRadius="2"
                    BorderThickness="1" />

            <Border x:Name="border2"
                    BorderBrush="#80022841"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="1" />

            <Border x:Name="border3"
                    BorderBrush="#34FFFFFF"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="2" />

            <Border x:Name="topGradient"
                    Height="17"
                    VerticalAlignment="Top">
               <Border.Background>
                  <LinearGradientBrush StartPoint="0.5,1"
                                       EndPoint="0.503,0.039">
                     <GradientStop Offset="0"
                                   Color="#00FFFFFF" />
                     <GradientStop Offset="1"
                                   Color="#4CFFFFFF" />
                  </LinearGradientBrush>
               </Border.Background>
            </Border>

            <Border x:Name="bottomGradient"
                    Margin="2">
               <Border.Background>
                  <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.03782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">
                     <GradientStop Offset="0"
                                   Color="#99FFFFFF" />
                     <GradientStop Offset="0.17"
                                   Color="#99FFFFFF" />
                     <GradientStop Offset="1"
                                   Color="#00FFFFFF" />

                     <RadialGradientBrush.RelativeTransform>
                        <RotateTransform CenterX="0.48747"
                                         CenterY="1.21575"
                                         Angle="-90" />
                     </RadialGradientBrush.RelativeTransform>
                  </RadialGradientBrush>
               </Border.Background>

               <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
               <StackPanel Orientation="Horizontal"
                           Margin="{TemplateBinding Padding}"
                           TextElement.Foreground="White">

                  <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                  <ContentPresenter x:Name="sortGlyphPresenter"
                                    Margin="6,0,4,0"
                                    Content="{x:Null}"
                                    ContentTemplate="{StaticResource groupByItemAscendingSortGlyph}"
                                    Visibility="Hidden" />

               </StackPanel>

            </Border>
         </Grid>
      </Border>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="border1"
                    Property="BorderBrush"
                    Value="#4DFFFFFF" />

            <Setter TargetName="border2"
                    Property="BorderBrush"
                    Value="#52022841" />

            <Setter TargetName="border3"
                    Property="BorderBrush"
                    Value="#71FFFFFF" />

            <Setter TargetName="topGradient"
                    Property="Background">

               <Setter.Value>
                  <LinearGradientBrush StartPoint="0.503,1.013"
                                       EndPoint="0.503,0.039">
                     <GradientStop Offset="0"
                                   Color="#19FFFFFF" />
                     <GradientStop Offset="1"
                                   Color="#99FFFFFF" />
                  </LinearGradientBrush>

               </Setter.Value>
            </Setter>

            <Setter TargetName="bottomGradient"
                    Property="Background">

               <Setter.Value>
                  <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.03782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">
                     <GradientStop Offset="0.0195"
                                   Color="#FFFFFFFF" />
                     <GradientStop Offset="0.169"
                                   Color="#FFFFFFFF" />
                     <GradientStop Offset="1"
                                   Color="#00FFFFFF" />

                     <RadialGradientBrush.RelativeTransform>
                        <RotateTransform CenterX="0.487447"
                                         CenterY="1.21575"
                                         Angle="-90" />
                     </RadialGradientBrush.RelativeTransform>
                  </RadialGradientBrush>
               </Setter.Value>
            </Setter>

         </Trigger>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter TargetName="border1"
                    Property="BorderBrush"
                    Value="#4DFFFFFF" />

            <Setter TargetName="border2"
                    Property="BorderBrush"
                    Value="#AE022841" />

            <Setter TargetName="border3"
                    Property="BorderBrush">

               <Setter.Value>
                  <LinearGradientBrush StartPoint="0.542,0.999"
                                       EndPoint="0.542,0.0231">
                     <GradientStop Offset="0"
                                   Color="#0A2F3B" />
                     <GradientStop Offset="0.509"
                                   Color="#0A2F3B" />
                     <GradientStop Offset="0.524"
                                   Color="#4D6B79" />
                     <GradientStop Offset="1"
                                   Color="#4D6B79" />
                  </LinearGradientBrush>
               </Setter.Value>
            </Setter>

            <Setter TargetName="topGradient"
                    Property="Background">

               <Setter.Value>
                  <LinearGradientBrush StartPoint="0.503339,1.0131"
                                       EndPoint="0.503339,0.0388058">
                     <GradientStop Offset="0"
                                   Color="#17699EB5" />
                     <GradientStop Offset="1"
                                   Color="#FF5E8799" />
                  </LinearGradientBrush>
               </Setter.Value>
            </Setter>

            <Setter TargetName="bottomGradient"
                    Property="Background">

               <Setter.Value>
                  <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.03782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">

                     <GradientStop Offset="0.019"
                                   Color="#FF000000" />
                     <GradientStop Offset="0.169"
                                   Color="#FF000000" />
                     <GradientStop Offset="1"
                                   Color="#33000000" />

                     <RadialGradientBrush.RelativeTransform>
                        <RotateTransform CenterX="0.487447"
                                         CenterY="1.21575"
                                         Angle="-90" />
                     </RadialGradientBrush.RelativeTransform>
                  </RadialGradientBrush>
               </Setter.Value>
            </Setter>

         </Trigger>

         <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{StaticResource groupByItemDescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!-- =================================================================== -->
   <!-- Styles required by some grid elements                               -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: baseSplitterStyle
    ************************** -->
   <Style x:Key="baseFixedColumnSplitterStyle"
          TargetType="views:FixedColumnSplitter">

   </Style>

   <!--**************************
    * STYLE: rowSplitterStyle
    ************************** -->
   <Style x:Key="rowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <Setter Property="Background"
              Value="#F1F2F4" />

   </Style>

   <!--**************************
    * STYLE: ColumnManagerRowSplitterStyle
    ************************** -->
   <Style x:Key="columnManagerRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <Setter Property="Template"
              Value="{StaticResource columnManagerRowFixedColumnSplitterTemplate}" />

   </Style>

   <!--**************************
    * STYLE: StatRowSplitterStyle
    ************************** -->
   <Style x:Key="statRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

      <!-- For aesthetic reasons, the FixedColumnSplitter is not shown in the StatRow. -->
      <Setter Property="Template"
              Value="{x:Null}" />

   </Style>

   <!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
   <Style x:Key="cellErrorStyle"
          TargetType="local:Cell">

      <Setter Property="Background"
              Value="{StaticResource errorBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource errorForegroundBrush}" />

      <Setter Property="ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}" />

      <Style.Triggers>
         <Trigger Property="IsValidationErrorRestrictive"
                  Value="True">
            <Setter Property="Background"
                    Value="{StaticResource errorBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsValidationErrorRestrictive"
                  Value="False">

            <Setter Property="Foreground"
                    Value="{StaticResource warningForegroundBrush}" />

            <Setter Property="Background"
                    Value="{StaticResource warningBackgroundBrush}" />

         </Trigger>
      </Style.Triggers>

   </Style>

   <!-- =================================================================== -->
   <!-- Keyed Styles of grid elements                                       -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: DataGridControl 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGridControlStyle"
          TargetType="local:DataGridControl">

      <Setter Property="BorderBrush"
              Value="{StaticResource gridControlBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Background"
              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

      <Setter Property="Foreground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- This is required to display gridlines of uniform thickness -->
      <Setter Property="SnapsToDevicePixels"
              Value="True" />

      <Setter Property="CellErrorStyle"
              Value="{StaticResource cellErrorStyle}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewDataGridControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DataGridControl (with hosted controls theming)
    ************************** -->
   <Style x:Key="treeGridflowViewForcedAeroNormalColorGridControlStyle"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGridControlStyle}"
          TargetType="local:DataGridControl">

      <Style.Resources>
         <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
               <markup:FrameworkThemeResourceDictionary Source="/PresentationFramework.Aero;V4.0.0.0;31bf3856ad364e35;component\themes/aero.normalcolor.xaml" />
               <xcdp:ControlsThemeResourceDictionary Source="/themes/aero.normalcolor.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--**************************
             * STYLE: NavigableComboBox
             ************************** -->
            <Style TargetType="{x:Type xcdp:NavigableComboBox}"
                   BasedOn="{StaticResource {x:Type ComboBox}}" />
         </ResourceDictionary>
      </Style.Resources>

   </Style>

   <!--**************************
    * STYLE: RowSelectorPane
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorRowSelectorPaneStyle"
          TargetType="local:RowSelectorPane">

      <Setter Property="Background"
              Value="{StaticResource verticalHeaderBackgroundBrush}" />

      <Setter Property="TextElement.Foreground"
              Value="{StaticResource headerForegroundBrush}" />

   </Style>

   <!--**************************
    * STYLE: RowSelector 
    ************************** -->
   <conv:TypeToBooleanConverter x:Key="rowTypeConverter" />
   <Style x:Key="treeGridflowViewAeroNormalColorRowSelectorStyle"
          TargetType="local:RowSelector">

      <!-- Set the RowSelector's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying RowSelectorPane. -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="BorderBrush"
              Value="{StaticResource rowSelectorBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="HorizontalContentAlignment"
              Value="Center" />

      <Setter Property="VerticalContentAlignment"
              Value="Top" />

      <Setter Property="Padding"
              Value="2" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewRowSelectorTemplate}" />

      <Style.Triggers>

         <!-- The DataContext of a RowSelector is always set to its corresponding
              Row/item. This is why we use DataTriggers with no explicit Binding Source
              when we want to react to properties of the Row/item. -->

         <!-- When the Row is Current, display the current glyph in the RowSelector (but not when the Row is an InsertionRow. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:InsertionRow} }"
                          Value="False" />
            </MultiDataTrigger.Conditions>
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />
         </MultiDataTrigger>

         <!-- When the Row is being edited, display the appropriate glyph in the RowSelector. -->
         <Trigger Property="IsBeingEdited"
                  Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

         </Trigger>

         <!-- When the Row has a validation error, display the appropriate glyph in the RowSelector. -->
         <Trigger Property="HasValidationError"
                  Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />
         </Trigger>

         <!-- When the row is an InsertionRow and the row is not being current -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:InsertionRow} }"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsBeingEdited}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasValidationError}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}" />
         </MultiDataTrigger>

         <!-- When the row is a FilterRow, always show the FilterRowGlyph. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource rowTypeConverter}, ConverterParameter={x:Type local:FilterRow}}"
                      Value="True">
            <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}" />
         </DataTrigger>
      </Style.Triggers>
   </Style>

   <!--**************************
    * STYLE: Row Style
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorRowStyle"
          TargetType="local:Row">

      <Setter Property="FocusVisualStyle"
              Value="{StaticResource treeGridflowViewRowFocusVisualStyle}" />

      <Setter Property="SelectionBackground"
              Value="{StaticResource selectionInnerRowBackgroundBrush}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- The Row is responsible for drawing the horizontal gridlines. It draws only its top gridline,
           assuming that the bottom gridline will be drawn by its following row/element -->

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineBrush}" />

      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource rowSplitterStyle}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewRowTemplate}" />

      <Style.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(views:ViewBase.IsLastItem)}"
                      Value="True">
            <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top, Bottom'}" />
         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.HasExpandedDetails)}"
                      Value="True">
            <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top, Bottom'}" />

         </DataTrigger>

         <!-- Enabled/Disabled Odd datarow style alternation -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridVirtualizingPanel.ItemIndex), Converter={x:Static conv:IndexToOddConverter.Singleton}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>

            <Setter Property="Background"
                    Value="#F1F2F4" />

         </MultiDataTrigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: DataRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorDataRowStyle"
          TargetType="local:DataRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewDataRowTemplate}" />

   </Style>

   <!--**************************
    * STYLE: InsertionRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorInsertionRowStyle"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDataRowStyle}">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewRowTemplate}" />

      <Style.Triggers>
         <Trigger Property="IsCurrent"
                  Value="True">

            <Setter Property="Background"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionBackground}" />
            <Setter Property="Foreground"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionForeground}" />

         </Trigger>

         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- We don't want to display the Group Margins for the InsertionRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorColumnManagerRowStyle"
          TargetType="local:ColumnManagerRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}">

      <!-- Use a different background and foreground than the base Row style. -->
      <Setter Property="Background"
              Value="{StaticResource horizontalHeaderBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource columnManagerRowSplitterStyle}" />

      <!-- We don't want to display a RowSelector for the ColumnManagerRow. -->
      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="ColumnChooserTemplate"
              Value="{StaticResource columnManagerRowContextMenuTemplate}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewColumnManagerRowTemplate}" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- We don't want to display the Group Margins for the ColumnManagerRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: StatRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorStatRowStyle"
          TargetType="local:StatRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}">

      <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource statRowSplitterStyle}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewStatRowTemplate}" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- When the StatRow is not inside a group, we don't want to display the Group Margins. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FilterRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorFilterRowStyle"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}">
      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
            <!-- We don't want to display the Group Margins for the FilterRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
         </Trigger>
      </Style.Triggers>
   </Style>

   <!--**************************
    * STYLE: FlexibleRow 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorFlexibleRowStyle"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}" />

   <!--**************************
    * STYLE: Cell
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorCellStyle"
          TargetType="local:Cell">

      <Setter Property="CurrentBackground"
              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

      <Setter Property="CurrentForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <Setter Property="SelectionBackground"
              Value="{StaticResource selectionInnerRowBackgroundBrush}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <!-- In TreeGridflowView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Right'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: DataCell
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorDataCellStyle"
          TargetType="local:DataCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorCellStyle}">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewDataCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewDataCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: InsertionCell
   ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorInsertionCellStyle"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDataCellStyle}">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorColumnManagerCellStyle"
          TargetType="local:ColumnManagerCell">

      <Setter Property="BorderBrush"
              Value="{StaticResource columnManagerCellBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Background"
              Value="Transparent" />

      <!-- In TreeGridflowView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource columnManagerCellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewColumnManagerCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewColumnManagerCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: StatCell
   ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorStatCellStyle"
          TargetType="local:StatCell">

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!-- In TreeGridflowView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- To prevent difference in size between StatCells and DataCells-->
      <Setter Property="BorderBrush"
              Value="Transparent" />

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Right'}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewStatCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewStatCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FilterCell
   ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorFilterCellStyle"
          TargetType="local:FilterCell">
      <Style.Resources>
         <Style TargetType="Button">
            <Setter Property="Background"
                    Value="#FF84868E" />
         </Style>
      </Style.Resources>
      <!-- In TreeGridflowView, each Cell has the same width as its ParentColum's ActualWidth -->
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->

      <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

      <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewFilterCellTemplate}" />

      <Style.Triggers>

         <!--# case 159855: Keeping the template simple improve performance. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.IsMainColumn}"
                      Value="True">
            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewFilterCellMainTemplate}" />
         </DataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FlexibleCell
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorFlexibleCellStyle"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorCellStyle}" >

      <Setter Property="Content"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=DefaultContent}" />

   </Style>

   <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupByControlStyle"
          TargetType="local:GroupByControl">

      <Setter Property="Foreground"
              Value="{StaticResource groupByControlForegroundBrush}" />

      <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical TreeGridflowView, a height of at least 25 is appropriate for the GroupByControl. -->
      <Setter Property="MinHeight"
              Value="25" />

      <Setter Property="Padding"
              Value="8" />

      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource aeroNormalColorGroupByControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupByItem
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupByItemStyle"
          TargetType="local:GroupByItem">

      <Setter Property="Padding"
              Value="{StaticResource columnManagerCellPadding}" />

      <Setter Property="Template"
              Value="{StaticResource aeroNormalColorGroupByItemTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupHeaderControl 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupHeaderControlStyle"
          TargetType="local:GroupHeaderControl">

      <!-- Set the GroupHeaderControl's background to Transparent to make it hit-testable. -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="VerticalContentAlignment"
              Value="Center" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="SelectionState"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=Group.SelectionState}" />

      <Setter Property="SelectionBackground"
              Value="{StaticResource selectionInnerRowBackgroundBrush}" />

      <Setter Property="SelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it holds the various InputBindings that make the
           GroupHeaderControl work. -->
      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewGroupHeaderControlTemplate}" />

      <Style.Triggers>
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content.IsBottomLevel}"
                          Value="False" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content.Level}"
                          Value="0" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AreGroupHeadersSticky}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AreGroupsFlattened}"
                          Value="True" />
               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.IsGroupSelectionEnabled}"
                          Value="False" />
            </MultiDataTrigger.Conditions>

            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewGroupHeaderTopLevelStickyControlTemplate}" />

            <Setter Property="Foreground"
                    Value="White" />
         </MultiDataTrigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupLevelIndicatorStyle"
          TargetType="local:GroupLevelIndicator">

      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).GroupLevelIndicatorWidth}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewGroupLevelIndicatorTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DetailIndicator
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorDetailIndicatorStyle"
          TargetType="local:DetailIndicator">

      <Setter Property="Background"
              Value="{x:Null}" />

      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DetailIndicatorWidth}" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewDetailIndicatorTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupLevelIndicatorPaneStyle"
          TargetType="local:GroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewGroupLevelIndicatorPaneTemplate}" />

      <Style.Triggers>
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="IsLeaf"
                          Value="False" />
               <Condition Property="views:ViewBase.IsLastItem"
                          Value="True" />
            </MultiTrigger.Conditions>

            <Setter Property="Margin"
                    Value="0,0,0,-5" />
         </MultiTrigger>

      </Style.Triggers>
   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupLevelIndicatorPaneStyle"
          TargetType="local:HierarchicalGroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewHierarchicalGroupLevelIndicatorPaneTemplate}" />

      <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
              Value="True" />

      <Setter Property="local:GroupLevelIndicatorPane.ShowVerticalBorder"
              Value="True" />

      <Style.Triggers>
         <Trigger Property="local:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">

            <!-- Stop the propagation of the value set by the default style trigger of
                 the ColumnManagerRow, InsertionRow, FilterRow and StatRow. -->
            <Setter Property="local:GroupLevelIndicatorPane.ShowIndicators"
                    Value="True" />

         </Trigger>
      </Style.Triggers>
   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByControlNode
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupByControlNodeStyle"
          TargetType="local:HierarchicalGroupByControlNode">

      <Setter Property="StairHeight"
              Value="0" />

      <Setter Property="ConnectionLineOffset"
              Value="0" />

      <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupByControlNodeTemplate}" />

   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByControl
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupByControlStyle"
          TargetType="local:HierarchicalGroupByControl">

      <!-- The Background property must be set for DragManager to work properly -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="Foreground"
              Value="White" />

      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="StairHeight"
              Value="0" />

      <Setter Property="ConnectionLineOffset"
              Value="0" />

      <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

      <Setter Property="ConnectionLinePen"
              Value="{StaticResource groupByConnectionLinePen}" />

      <Setter Property="local:RowSelector.Visible"
              Value="False" />

      <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupByControlTemplate}" />

      <Style.Triggers>

         <!-- We use the old GroupByControl Template if there are no Details in the DataGridControl.ItemsSource -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HasDetails}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ParentDataGridContext, Converter={StaticResource nullToBooleanConverter}}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Template"
                    Value="{StaticResource treeGridflowViewCommonHierarchicalGroupByControlOldGroupByControlTemplate}" />

         </MultiDataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: HierarchicalGroupByItem
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorHierarchicalGroupByItemStyle"
          TargetType="local:HierarchicalGroupByItem">

      <!--The Background property must be set for DragManager to work properly-->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="Padding"
              Value="{StaticResource columnManagerCellPadding}" />

      <Setter Property="Margin"
              Value="4,0,4,0" />

      <Setter Property="Template"
              Value="{StaticResource aeroNormalColorHierarchicalGroupByItemTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupNavigationControl
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupNavigationControlStyle"
          TargetType="local:GroupNavigationControl">
      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewGroupNavigationControlTemplate}" />
   </Style>

   <!--**************************
    * STYLE: GroupNavigationControlItem
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupNavigationControlItemStyle"
          TargetType="{x:Type local:GroupNavigationControlItem}">

      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type local:GroupNavigationControlItem}">
               <Grid SnapsToDevicePixels="true">
                  <Border x:Name="Border"
                          Background="Transparent" />
                  <Border Margin="2">
                     <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Border>
               </Grid>
               <ControlTemplate.Triggers>

                  <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                  <Trigger Property="IsMouseOver"
                           Value="true">
                     <Setter Property="Background"
                             TargetName="Border"
                             Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                     <Setter Property="Foreground"
                             Value="Black" />
                  </Trigger>

                  <Trigger Property="IsEnabled"
                           Value="false">
                     <Setter Property="Foreground"
                             Value="Gray" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!--**************************
    * STYLE: GroupNavigationButton
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorGroupNavigationButtonStyle"
          TargetType="local:GroupNavigationButton">
      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewGroupNavigationButtonTemplate}" />
   </Style>

   <!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorAutoFilterControlStyle"
          TargetType="local:AutoFilterControl">

      <Setter Property="Width"
              Value="200" />
      <Setter Property="Template"
              Value="{StaticResource treeGridflowViewAutoFilterControlTemplate}" />
      <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
   </Style>

   <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
      <Setter Property="IsCheckable"
              Value="True" />
      <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
      <Setter Property="StaysOpenOnClick"
              Value="True" />
      <Setter Property="HorizontalContentAlignment"
              Value="Left" />
      <Setter Property="VerticalContentAlignment"
              Value="Center" />
   </Style>

   <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorColumnChooserContextMenuStyle"
          TargetType="{x:Type local:ColumnChooserContextMenu}"
          BasedOn="{StaticResource {x:Type ContextMenu}}">
      <Setter Property="ItemContainerStyle"
              Value="{StaticResource treeGridflowViewAeroNormalColorColumnChooserContextMenuMenuItemStyle}" />
      <Setter Property="DisplayMemberPath"
              Value="Title" />
      <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
   </Style>

   <!--**************************
    * STYLE: ScrollTip
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorScrollTipStyle"
          TargetType="local:ScrollTip">

      <Setter Property="Template"
              Value="{StaticResource scrollTipTemplate}" />

      <Setter Property="Background">
         <Setter.Value>
            <LinearGradientBrush StartPoint="0.5,1"
                                 EndPoint="0.5,0">
               <GradientStop Color="#FFA9DAF6"
                             Offset="0" />

               <GradientStop Color="#FFD9F0FC"
                             Offset="0.5" />

               <GradientStop Color="#FFE8F5FD"
                             Offset="1" />
            </LinearGradientBrush>
         </Setter.Value>
      </Setter>

      <Setter Property="BorderBrush"
              Value="#FF3C7FB1" />

      <Setter Property="TextElement.Foreground"
              Value="Black" />

      <Setter Property="VerticalAlignment"
              Value="Center" />

      <Setter Property="HorizontalAlignment"
              Value="Right" />

   </Style>

   <!--**************************
    * STYLE: ColumnChooserControl 
    ************************** -->
   <Style x:Key="treeGridflowViewAeroNormalColorColumnChooserControlStyle"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource AeroNormalColorColumnChooserControlStyle}" />

   <!-- =================================================================== -->
   <!-- Default values for the View                                         -->
   <!-- =================================================================== -->

   <Style x:Key="treeGridflowViewAeroNormalColorDefaultValues"
          TargetType="views:TreeGridflowView">

      <Setter Property="GroupLevelIndicatorWidth"
              Value="17" />

      <Setter Property="DetailIndicatorWidth"
              Value="34" />

      <Setter Property="DefaultDropMarkPen"
              Value="{StaticResource dropMarkPen}" />

      <Setter Property="VerticalGridLineBrush"
              Value="{StaticResource hotRowBorderBrush}" />

      <Setter Property="VerticalGridLineThickness"
              Value="0" />

      <Setter Property="HorizontalGridLineBrush"
              Value="{StaticResource hotRowBorderBrush}" />

      <Setter Property="HorizontalGridLineThickness"
              Value="0" />

      <Setter Property="AutoFilterDropDownGlyph"
              Value="{StaticResource autoFilterDropDownGlyph}" />

      <Setter Property="AutoFilterGlyph"
              Value="{StaticResource autoFilterGlyph}" />

      <!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

      <Setter Property="AscendingSortGlyph"
              Value="{StaticResource ascendingSortGlyph}" />

      <Setter Property="DescendingSortGlyph"
              Value="{StaticResource descendingSortGlyph}" />

      <Setter Property="SortIndexGlyph"
              Value="{StaticResource sortIndexGlyph}" />

      <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />

      <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />

      <Setter Property="CurrentItemGlyph"
              Value="{StaticResource currentItemGlyph}" />

      <Setter Property="EditingRowGlyph"
              Value="{StaticResource editingRowGlyph}" />

      <Setter Property="ValidationErrorGlyph"
              Value="{StaticResource validationErrorGlyph}" />

      <Setter Property="InsertionRowGlyph"
              Value="{StaticResource insertionRowGlyph}" />

      <Setter Property="FilterRowGlyph"
              Value="{StaticResource filterRowGlyph}" />

      <Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />

      <Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}" />
   </Style>

   <!-- =================================================================== -->
   <!-- DefaultStyleKey declarations                                        -->
   <!-- =================================================================== -->

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme}"
          TargetType="views:TreeGridflowView"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDefaultValues}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:DataGridControl}"
          TargetType="local:DataGridControl"
          BasedOn="{StaticResource treeGridflowViewForcedAeroNormalColorGridControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:RowSelectorPane}"
          TargetType="local:RowSelectorPane"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowSelectorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:RowSelector}"
          TargetType="local:RowSelector"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowSelectorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:Row}"
          TargetType="local:Row"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:DataRow}"
          TargetType="local:DataRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDataRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:InsertionRow}"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorInsertionRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:ColumnManagerRow}"
          TargetType="local:ColumnManagerRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorColumnManagerRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:StatRow}"
          TargetType="local:StatRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorStatRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:FilterRow}"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorFilterRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:FlexibleRow}"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorFlexibleRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:Cell}"
          TargetType="local:Cell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:DataCell}"
          TargetType="local:DataCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDataCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:InsertionCell}"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorInsertionCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:ColumnManagerCell}"
          TargetType="local:ColumnManagerCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorColumnManagerCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:StatCell}"
          TargetType="local:StatCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorStatCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:FilterCell}"
          TargetType="local:FilterCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorFilterCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:FlexibleCell}"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorFlexibleCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupByControl}"
          TargetType="local:GroupByControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupByControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupByItem}"
          TargetType="local:GroupByItem"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupByItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupHeaderControl}"
          TargetType="local:GroupHeaderControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupHeaderControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupLevelIndicator}"
          TargetType="local:GroupLevelIndicator"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupLevelIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:DetailIndicator}"
          TargetType="local:DetailIndicator"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorDetailIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupLevelIndicatorPane}"
          TargetType="local:GroupLevelIndicatorPane"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:HierarchicalGroupLevelIndicatorPane}"
          TargetType="local:HierarchicalGroupLevelIndicatorPane"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:AutoFilterControl}"
          TargetType="local:AutoFilterControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorAutoFilterControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:ScrollTip}"
          TargetType="local:ScrollTip"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorScrollTipStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:HierarchicalGroupByControl}"
          TargetType="local:HierarchicalGroupByControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupByControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:HierarchicalGroupByControlNode}"
          TargetType="local:HierarchicalGroupByControlNode"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupByControlNodeStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:HierarchicalGroupByItem}"
          TargetType="local:HierarchicalGroupByItem"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorHierarchicalGroupByItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:ColumnChooserContextMenu}"
          TargetType="local:ColumnChooserContextMenu"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorColumnChooserContextMenuStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupNavigationButton}"
          TargetType="local:GroupNavigationButton"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupNavigationButtonStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupNavigationControl}"
          TargetType="local:GroupNavigationControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupNavigationControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:GroupNavigationControlItem}"
          TargetType="local:GroupNavigationControlItem"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorGroupNavigationControlItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:TreeGridflowView, ThemeType=views:AeroNormalColorTheme, TargetElementType=local:ColumnChooserControl}"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource treeGridflowViewAeroNormalColorColumnChooserControlStyle}" />

</ResourceDictionary>
