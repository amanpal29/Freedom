<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2015 Xceed Software Inc.

  [CompactCardView.Windows7.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views">

   <ResourceDictionary.MergedDictionaries>

      <!-- Include the view independant, color-scheme independant, theme resources -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Windows7.Resources.xaml" />

      <!-- Include the view dependant, color-scheme independant, theme graphics -->
      <markup:DataGridThemeResourceDictionary Source="Resources/CompactCardView.Windows7.Graphics.xaml" />

      <!-- Include the standard grid element templates -->
      <markup:DataGridThemeResourceDictionary Source="../Common/CompactCardView.GridElementTemplates.xaml" />

      <!-- Control Styles used in the Grid Control -->
      <markup:DataGridThemeResourceDictionary Source="Resources/Windows7.Controls.xaml" />

   </ResourceDictionary.MergedDictionaries>

   <!-- =================================================================== -->
   <!-- Resources specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <SolidColorBrush x:Key="lightBackgroundBrush"
                    Color="#DDE0E3" />

   <LinearGradientBrush x:Key="dataGridControlBackground"
                        EndPoint="0.5,1"
                        StartPoint="0.5,0">
      <GradientStop Color="#FFD1ECFF" />
      <GradientStop Color="#FFE5EFFF"
                    Offset="1" />
   </LinearGradientBrush>

   <RadialGradientBrush x:Key="rowTitleBackgroundBrush"
                        Center="0.503,0.35"
                        GradientOrigin="1.009,0.295"
                        RadiusX="0.636"
                        RadiusY="2.375">
      <GradientStop Color="#FF04A2F7"
                    Offset="0.653" />
      <GradientStop Color="#FF015EC8"
                    Offset="0.344" />
      <GradientStop Color="#FF86E9F9"
                    Offset="1" />
      <GradientStop Color="#FF013C98"
                    Offset="0.003" />
   </RadialGradientBrush>

   <RadialGradientBrush x:Key="rowTitleMouseOverEffectBrush"
                        Center="0.5,1"
                        GradientOrigin="0.5,1.749"
                        RadiusX="0.4"
                        RadiusY="0.75">
      <GradientStop Color="#DDFFFFFF"
                    Offset="0.474" />
      <GradientStop Color="#3CFFFFFF"
                    Offset="0.84" />
      <GradientStop Offset="1" />
   </RadialGradientBrush>

   <RadialGradientBrush x:Key="rowTitleSelectedPathBrush"
                        GradientOrigin="1.122,1.554"
                        RadiusX="0.948"
                        RadiusY="1.052">
      <GradientStop />
      <GradientStop Offset="0.679" />
      <GradientStop Color="#7FFFFFFF"
                    Offset="0.707" />
   </RadialGradientBrush>

   <LinearGradientBrush x:Key="rowTitleSelectedOverlayBrush"
                        EndPoint="0.5,1"
                        StartPoint="0.5,0">
      <GradientStop Color="#BFFFFFFF" />
      <GradientStop Offset="0.5"
                    Color="#26FFFFFF" />
      <GradientStop Color="#BFFFFFFF"
                    Offset="1" />
   </LinearGradientBrush>

   <SolidColorBrush x:Key="groupByItemBorderBrush"
                    Color="#6F9DD9" />

   <LinearGradientBrush x:Key="groupByItemBackgroundBrush"
                        EndPoint="0.5,1"
                        StartPoint="0.5,0">
      <GradientStop Color="White"
                    Offset="0" />
      <GradientStop Offset="0.50"
                    Color="#7FFFFFFF" />
      <GradientStop Color="White"
                    Offset="1" />
   </LinearGradientBrush>

   <RadialGradientBrush x:Key="groupByItemMouseOverBackgroundBrush"
                        Center="0.507,0.779"
                        GradientOrigin="0.51,1.174"
                        RadiusX="0.664"
                        RadiusY="0.664">
      <GradientStop Color="White"
                    Offset="0.175" />
      <GradientStop Offset="0.776"
                    Color="#591494DF" />
      <GradientStop Color="#BFFFFFFF"
                    Offset="0.325" />
      <GradientStop Color="#4CFFFFFF"
                    Offset="1" />
      <GradientStop Color="#3FFFFFFF"
                    Offset="0.484" />
   </RadialGradientBrush>

   <LinearGradientBrush x:Key="groupByItemPressedBackgroundBrush"
                        EndPoint="0.5,1"
                        StartPoint="0.5,0">
      <GradientStop Color="White"
                    Offset="0" />
      <GradientStop Offset="0.528"
                    Color="#FF9ADAFF" />
      <GradientStop Color="White"
                    Offset="1" />
      <GradientStop Color="#FFC1E8FF"
                    Offset="0.244" />
      <GradientStop Color="#FFC7EAFF"
                    Offset="0.785" />
   </LinearGradientBrush>

   <LinearGradientBrush x:Key="inactiveSelectionBackgroundBrush"
                        StartPoint="0,1"
                        EndPoint="0,0">

      <GradientStop Color="#FFE8E8E8"
                    Offset="0" />

      <GradientStop Color="#FF999999"
                    Offset="0.6" />

      <GradientStop Color="#FFB4B4B4"
                    Offset="0.62" />

      <GradientStop Color="#FFC9C9C9"
                    Offset="0.92" />

      <GradientStop Color="#FFCCCCCC"
                    Offset="0.96" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="highlightBackgroundBrush"
                        EndPoint="0.994,0.454"
                        StartPoint="0.005,0.472">
      <GradientStop Offset="1" />
      <GradientStop Color="#FF35D16A" />
      <GradientStop Color="#736FEA2F"
                    Offset="0.6" />
   </LinearGradientBrush>

   <SolidColorBrush x:Key="selectionBackgroundBrush"
                    Color="#A7CDF0" />

   <SolidColorBrush x:Key="selectionForegroundBrush"
                    Color="#204D89" />

   <SolidColorBrush x:Key="inactiveSelectionForegroundBrush"
                    Color="White" />

   <SolidColorBrush x:Key="cardBorderBrush"
                    Color="Black" />

   <SolidColorBrush x:Key="groupByControlForegroundBrush"
                    Color="Black" />

   <SolidColorBrush x:Key="warningBackgroundBrush"
                    Color="#FFC400" />

   <SolidColorBrush x:Key="warningForegroundBrush"
                    Color="Black" />

   <RadialGradientBrush x:Key="groupByControlBackgroundBrush"
                        Center="0.503,0.35"
                        GradientOrigin="1.1,0.504"
                        RadiusX="0.523"
                        RadiusY="2.375">
      <GradientStop Color="#FF04A2F7"
                    Offset="0.5" />
      <GradientStop Color="#FF015EC8"
                    Offset="0.25" />
      <GradientStop Color="#FF86E9F9"
                    Offset="0.682" />
      <GradientStop Color="#FF013C98"
                    Offset="0.003" />
      <GradientStop Color="#FFC9F4FB"
                    Offset="1" />
   </RadialGradientBrush>

   <LinearGradientBrush x:Key="columnManagerCellHotBackgroundBrush"
                        StartPoint="0,1"
                        EndPoint="0,0">

      <GradientStop	Offset="0"
                     Color="#55FFFFFF" />

      <GradientStop	Offset="0.2"
                     Color="#00FFFFFF" />

      <GradientStop	Offset="1"
                     Color="#55FFFFFF" />

   </LinearGradientBrush>

   <LinearGradientBrush x:Key="columnChooserBackgroundBrush"
                        EndPoint="0.979,0.046"
                        StartPoint="-0.019,1.017">
      <GradientStop Color="#FF1686D8"
                    Offset="1" />
      <GradientStop Color="#FF06397B"
                    Offset="0.297" />
   </LinearGradientBrush>

   <RadialGradientBrush x:Key="cardTitleErrorBackgroundBrush"
                        Center="0.506,0.514"
                        GradientOrigin="1.027,0.494"
                        RadiusX="0.627"
                        RadiusY="3.096">
      <GradientStop Color="Red"
                    Offset="0.653" />
      <GradientStop Color="#FFC50000"
                    Offset="0.344" />
      <GradientStop Color="#FFFF8D8D"
                    Offset="1" />
      <GradientStop Color="#FF820900"
                    Offset="0.003" />
   </RadialGradientBrush>

   <Pen x:Key="groupByConnectionLinePen"
        Thickness="1"
        Pen.Brush="Black" />

   <Pen x:Key="cardSeparatorLinePen"
        Thickness="1">
      <Pen.Brush>
         <LinearGradientBrush EndPoint="0.5,1"
                              StartPoint="0.5,0">
            <GradientStop Color="#00000000"
                          Offset="0" />
            <GradientStop Color="#00000000"
                          Offset="1" />
            <GradientStop Color="Black"
                          Offset="0.5" />
         </LinearGradientBrush>
      </Pen.Brush>
   </Pen>

   <!-- =================================================================== -->
   <!-- Templates specific to this View/Theme/ColorScheme                   -->
   <!-- =================================================================== -->

   <!--**************************
    * TEMPLATE: DataGridControl 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7DataGridControlTemplate"
                    TargetType="local:DataGridControl">
      <Grid>

         <Border Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

            <Grid>

               <ContentPresenter VerticalAlignment="Bottom"
                                 HorizontalAlignment="Right"
                                 ContentTemplate="{StaticResource dataGridControlSproutPattern}" />

               <!-- The AdornerDecorator will allow visual cues for Drag & Drop operations. -->
               <AdornerDecorator x:Name="PART_DragDropAdornerDecorator">
                  <!-- The CardViewScrollViewer takes care of laying out the various sections of
                    a DataGrid in CardView: FixedHeaders, FixedFooters, etc. -->
                  <views:CardViewScrollViewer x:Name="PART_ScrollViewer"
                                              Padding="{TemplateBinding Padding}">

                     <views:CardViewItemsHost Margin="0,15,0,5"
                                              Orientation="Vertical"
                                              FixedSize="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardWidth, Mode=TwoWay}"
                                              AllowCardResize="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowCardResize}"
                                              SeparatorLinePen="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SeparatorLinePen}" />

                  </views:CardViewScrollViewer>
               </AdornerDecorator>
            </Grid>
         </Border>

         <Grid x:Name="connectionStateGrid"
               HorizontalAlignment="Right"
               VerticalAlignment="Bottom"
               Margin="0,0,25,25"
               Height="30"
               Width="30">
            <ContentPresenter x:Name="connectionStateLoadingContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateLoadingGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed" />
            <ContentPresenter x:Name="connectionStateCommittingContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateCommittingGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed" />
            <ContentPresenter x:Name="connectionStateErrorContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateErrorGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed" />
         </Grid>
      </Grid>
      <ControlTemplate.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).IsConnectionStateGlyphEnabled}"
                      Value="False">
            <Setter TargetName="connectionStateGrid"
                    Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Loading">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Committing">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Visible" />
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Error">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Row 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7RowTemplate"
                    TargetType="local:Row">
      <Grid>
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel>

               <!-- Border that contains the Title of the Card. -->
               <Border x:Name="cardTitleBorder"
                       DockPanel.Dock="Top"
                       BorderThickness="1"
                       BorderBrush="Black"
                       Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                       TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                       TextElement.FontWeight="Bold">

                  <!-- This Grid is used to layout the various elements of the Card Title. -->
                  <Grid MinHeight="20">

                     <Border x:Name="mainBorder"
                             Background="{StaticResource rowTitleBackgroundBrush}">

                        <Grid>
                           <Grid x:Name="selectedEffect"
                                 Opacity="0">
                              <Border Margin="0,1"
                                      Background="{StaticResource rowTitleSelectedPathBrush}" />
                              <Border Background="{StaticResource rowTitleSelectedOverlayBrush}" />
                           </Grid>

                           <Border x:Name="mouseOverEffect"
                                   Background="{StaticResource rowTitleMouseOverEffectBrush}"
                                   Opacity="0" />

                           <Border Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}">

                              <!-- ContentPresenter in charge of displaying the Card Title. -->
                              <ContentPresenter x:Name="cardTitlePresenter"
                                                Content="{Binding}"
                                                ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleTemplate}"
                                                MinHeight="15"
                                                Margin="4,0,0,0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center" />

                           </Border>
                        </Grid>

                     </Border>

                  </Grid>

               </Border>

               <!-- Border that contails the Cells. -->
               <Border x:Name="cellsHostBorder"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="1,0,1,1"
                       Padding="3">

                  <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
                  <StackPanel x:Name="PART_CellsHost"
                              Orientation="Vertical"
                              Grid.IsSharedSizeScope="True" />

               </Border>
            </DockPanel>

         </Border>

         <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
         <ContentPresenter x:Name="glyphPresenter"
                           Content="{x:Null}"
                           ContentTemplate="{x:Null}"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Top" />

      </Grid>
      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="Black" />

            <MultiDataTrigger.EnterActions>
               <BeginStoryboard x:Name="mousePressedAnimation">
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </MultiDataTrigger.EnterActions>

            <MultiDataTrigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </MultiDataTrigger.ExitActions>

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="False">

            <Setter TargetName="cellsHostBorder"
                    Property="BorderBrush"
                    Value="Transparent" />

         </Trigger>

         <Trigger Property="IsBeingEdited"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="IsBeingEdited"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

         </MultiTrigger>

         <Trigger Property="HasValidationError"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource cardTitleErrorBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="White" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsMouseOver"
                          Value="True" />

               <Condition Property="IsCurrent"
                          Value="False" />

            </MultiTrigger.Conditions>

            <MultiTrigger.EnterActions>

               <BeginStoryboard x:Name="mouseOverAnimation">

                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </MultiTrigger.EnterActions>

            <MultiTrigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </MultiTrigger.ExitActions>

         </MultiTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: InsertionRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7InsertionRowTemplate"
                    TargetType="local:InsertionRow">
      <Grid>
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel x:Name="PART_RowFocusRoot">

               <!-- Border that contains the Title of the Card. -->
               <Border x:Name="cardTitleBorder"
                       DockPanel.Dock="Top"
                       BorderBrush="Black"
                       BorderThickness="1"
                       Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                       TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                       TextElement.FontWeight="Bold">

                  <!-- This Grid is used to layout the various elements of the Card Title. -->
                  <Grid MinHeight="20">

                     <Border x:Name="mainBorder"
                             Background="{StaticResource rowTitleBackgroundBrush}">

                        <Grid>
                           <Grid x:Name="selectedEffect"
                                 Opacity="0">
                              <Border Margin="0,1"
                                      Background="{StaticResource rowTitleSelectedPathBrush}" />
                              <Border Background="{StaticResource rowTitleSelectedOverlayBrush}" />
                           </Grid>

                           <Border x:Name="mouseOverEffect"
                                   Background="{StaticResource rowTitleMouseOverEffectBrush}"
                                   Opacity="0" />

                           <Border Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}">

                              <!-- ContentPresenter in charge of displaying the Card Title. -->
                              <ContentPresenter x:Name="cardTitlePresenter"
                                                ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionCardTitleTemplate}"
                                                MinHeight="15"
                                                Margin="4,0,0,0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center" />

                           </Border>

                        </Grid>

                     </Border>

                  </Grid>

               </Border>

               <!-- Border that contails the Cells. -->
               <Border x:Name="cellsHostBorder"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="1,0,1,1"
                       Padding="3">

                  <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
                  <StackPanel x:Name="PART_CellsHost"
                              Orientation="Vertical"
                              Visibility="Collapsed"
                              Grid.IsSharedSizeScope="True" />

               </Border>
            </DockPanel>

         </Border>

         <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
         <ContentPresenter x:Name="glyphPresenter"
                           Content="{x:Null}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Top" />

      </Grid>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="Black" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="False">

            <Setter TargetName="cellsHostBorder"
                    Property="BorderBrush"
                    Value="Transparent" />

         </Trigger>

         <Trigger Property="IsCurrent"
                  Value="True">

            <Setter TargetName="PART_CellsHost"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="cardTitleBorder"
                    Property="KeyboardNavigation.IsTabStop"
                    Value="False" />

            <Trigger.EnterActions>
               <BeginStoryboard x:Name="mousePressedAnimation">
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.EnterActions>

            <Trigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </Trigger.ExitActions>

         </Trigger>

         <Trigger Property="IsBeingEdited"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

            <Setter TargetName="PART_CellsHost"
                    Property="Visibility"
                    Value="Visible" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="IsBeingEdited"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

         </MultiTrigger>

         <Trigger Property="HasValidationError"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource cardTitleErrorBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="White" />

         </Trigger>

         <Trigger Property="NavigationBehavior"
                  Value="CellOnly">

            <Setter TargetName="cardTitleBorder"
                    Property="Focusable"
                    Value="True" />
         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsMouseOver"
                          Value="True" />

               <Condition Property="IsCurrent"
                          Value="False" />

            </MultiTrigger.Conditions>

            <MultiTrigger.EnterActions>

               <BeginStoryboard x:Name="mouseOverAnimation">

                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </MultiTrigger.EnterActions>

            <MultiTrigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </MultiTrigger.ExitActions>

         </MultiTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: StatRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7StatRowTemplate"
                    TargetType="local:StatRow">
      <Grid>
         <Border Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel>

               <!-- Border that contains the Title of the Card. -->
               <Border DockPanel.Dock="Top"
                       BorderThickness="0,0,0,1"
                       BorderBrush="Black"
                       Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                       TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                       TextElement.FontWeight="Bold">

                  <!-- This Grid is used to layout the various elements of the Card Title. -->
                  <Grid MinHeight="20">

                     <Border x:Name="mainBorder"
                             Background="{StaticResource rowTitleBackgroundBrush}">

                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          TextElement.FontFamily="Segoe UI" />

                     </Border>

                     <!-- ContentPresenter in charge of displaying the Card Title. -->
                     <ContentPresenter Content="{Binding}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).StatCardTitleTemplate}"
                                       MinHeight="15"
                                       Margin="4,0,0,0"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Center" />

                  </Grid>

               </Border>

               <!-- Border that contails the Cells. -->
               <Border Padding="3">

                  <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
                  <StackPanel x:Name="PART_CellsHost"
                              Orientation="Vertical"
                              Grid.IsSharedSizeScope="True" />

               </Border>
            </DockPanel>

         </Border>

      </Grid>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7FilterRowTemplate"
                    TargetType="local:FilterRow">
      <Grid>
         <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel x:Name="PART_RowFocusRoot">

               <!-- Border that contains the Title of the Card. -->
               <Border x:Name="cardTitleBorder"
                       DockPanel.Dock="Top"
                       BorderBrush="Black"
                       BorderThickness="1"
                       Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                       TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                       TextElement.FontWeight="Bold">

                  <!-- This Grid is used to layout the various elements of the Card Title. -->
                  <Grid MinHeight="20">

                     <Border x:Name="mainBorder"
                             Background="{StaticResource rowTitleBackgroundBrush}">

                        <Grid>
                           <Grid x:Name="selectedEffect"
                                 Opacity="0">
                              <Border Margin="0,1"
                                      Background="{StaticResource rowTitleSelectedPathBrush}" />
                              <Border Background="{StaticResource rowTitleSelectedOverlayBrush}" />
                           </Grid>

                           <Border x:Name="mouseOverEffect"
                                   Background="{StaticResource rowTitleMouseOverEffectBrush}"
                                   Opacity="0" />

                           <Border Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}">

                              <!-- ContentPresenter in charge of displaying the Card Title. -->
                              <ContentPresenter x:Name="cardTitlePresenter"
                                                ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterCardTitleTemplate}"
                                                MinHeight="15"
                                                Margin="4,0,0,0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center" />

                           </Border>

                        </Grid>

                     </Border>

                  </Grid>

               </Border>

               <!-- Border that contails the Cells. -->
               <Border x:Name="cellsHostBorder"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="1,0,1,1"
                       Padding="3">

                  <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
                  <StackPanel x:Name="PART_CellsHost"
                              Orientation="Vertical"
                              Visibility="Visible"
                              Grid.IsSharedSizeScope="True" />

               </Border>
            </DockPanel>

         </Border>

         <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
         <ContentPresenter x:Name="glyphPresenter"
                           Content="{x:Null}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Top" />

      </Grid>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="Black" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).DataGridControl.HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="False">

            <Setter TargetName="cellsHostBorder"
                    Property="BorderBrush"
                    Value="Transparent" />

         </Trigger>

         <Trigger Property="IsCurrent"
                  Value="True">

            <Trigger.EnterActions>
               <BeginStoryboard x:Name="mousePressedAnimation">
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.EnterActions>

            <Trigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="selectedEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </Trigger.ExitActions>

         </Trigger>

         <Trigger Property="NavigationBehavior"
                  Value="CellOnly">

            <Setter TargetName="cardTitleBorder"
                    Property="Focusable"
                    Value="True" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsMouseOver"
                          Value="True" />

               <Condition Property="IsCurrent"
                          Value="False" />

            </MultiTrigger.Conditions>

            <MultiTrigger.EnterActions>

               <BeginStoryboard x:Name="mouseOverAnimation">

                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </MultiTrigger.EnterActions>

            <MultiTrigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="mouseOverEffect"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>

            </MultiTrigger.ExitActions>

         </MultiTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Cell 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7CellTemplate"
                    TargetType="local:Cell">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, each cell consists of its FieldName followed by its Content. We use
              a Grid to layout both elements, with a SharedSizeGroup on the column that lays out
              the FieldName. In order for this to work as expected, the Row's CellsHost Panel
              must be set as the Grid.IsSharedSizeScope. -->
         <Grid>

            <Grid.ColumnDefinitions>
               <!-- FieldName -->
               <ColumnDefinition SharedSizeGroup="CellFieldName" />

               <!-- Cell Content -->
               <ColumnDefinition Width="*" />

            </Grid.ColumnDefinitions>

            <Border x:Name="cellHighlight"
                    Background="{StaticResource highlightBackgroundBrush}"
                    Opacity="0"
                    Grid.ColumnSpan="2" />

            <!-- Horizontal StackPanel used to lay out the FieldName and a colon. -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">

               <ContentPresenter Grid.Column="0"
                                 Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.Title}"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplate}"
                                 ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplateSelector}" />

               <TextBlock x:Name="separatorText"
                          Text=": " />

            </StackPanel>

            <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                        Grid.Column="1"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

         </Grid>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When changing the appearance (e.g. background/foreground) of the Cell to reflect specific
              states (e.g. IsCurrent), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitely set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

         <!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
              We do this only when the cell does not have a validation error because we must give priority
              to the CellErrorStyle (if present).-->

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="True" />

               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Trigger.EnterActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.1"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.EnterActions>

            <Trigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.ExitActions>
         </Trigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
            <Setter Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>

         <!-- DataTrigger to hide the separatorText when ParentColumn.Title is null or Empty. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.Title, Converter={StaticResource emptyStringToBooleanConverter}}"
                      Value="True">
            <Setter TargetName="separatorText"
                    Property="Visibility"
                    Value="Hidden" />
         </DataTrigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterCell 
    ************************** -->
   <conv:NullToBooleanConverter x:Key="nullToBooleanConverter" />
   <ControlTemplate x:Key="compactCardViewWindows7FilterCellTemplate"
                    TargetType="local:FilterCell">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, each cell consists of its FieldName followed by its Content. We use
              a Grid to layout both elements, with a SharedSizeGroup on the column that lays out
              the FieldName. In order for this to work as expected, the Row's CellsHost Panel
              must be set as the Grid.IsSharedSizeScope. -->
         <Grid>

            <Grid.ColumnDefinitions>
               <!-- FieldName -->
               <ColumnDefinition SharedSizeGroup="CellFieldName" />

               <!-- Cell Content -->
               <ColumnDefinition Width="*" />

               <!-- ClearFilter Button-->

               <ColumnDefinition Width="Auto" />

            </Grid.ColumnDefinitions>

            <Border x:Name="cellHighlight"
                    Background="{StaticResource highlightBackgroundBrush}"
                    Opacity="0"
                    Grid.ColumnSpan="3" />

            <!-- Horizontal StackPanel used to lay out the FieldName and a colon. -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">

               <ContentPresenter Grid.Column="0"
                                 Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.Title}"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplate}"
                                 ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplateSelector}" />

               <TextBlock x:Name="separatorText"
                          Text=": " />

            </StackPanel>

            <local:CellContentPresenter Grid.Column="1"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

            <Button x:Name="clearFilterButton"
                    Focusable="False"
                    Command="local:DataGridCommands.ClearFilter"
                    Cursor="Hand"
                    Visibility="Collapsed"
                    Grid.Column="2"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Template="{StaticResource clearFilterButtonTemplate}" />

         </Grid>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When changing the appearance (e.g. background/foreground) of the Cell to reflect specific
              states (e.g. IsCurrent), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitely set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

         <!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
              We do this only when the cell does not have a validation error because we must give priority
              to the CellErrorStyle (if present).-->

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="True" />

               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <Trigger Property="IsMouseOver"
                  Value="True">

            <Trigger.EnterActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.1"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.EnterActions>

            <Trigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.ExitActions>
         </Trigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.IsCurrent}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasFilter}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
            <Setter Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>

         <!-- ContentTemplate will be null if the data type is not handled by the Filtering 
              system, so we set the visibility to collapsed to avoid confusion for the user. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContentTemplate, Converter={StaticResource nullToBooleanConverter}}"
                      Value="True">
            <Setter Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>

         <!-- DataTrigger to hide the separatorText when ParentColumn.Title is null or Empty. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.Title, Converter={StaticResource emptyStringToBooleanConverter}}"
                      Value="True">
            <Setter TargetName="separatorText"
                    Property="Visibility"
                    Value="Hidden" />
         </DataTrigger>

         <!-- Show the ClearFilter Button if there is a filter value and the 
              ClearFilterButtonVisibility is set to Auto. -->
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="HasFilter"
                          Value="True" />

               <Condition Property="local:FilterCell.ClearFilterButtonVisibility"
                          Value="Auto" />
            </MultiTrigger.Conditions>

            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </MultiTrigger>

         <!-- Show the ClearFilter Button if the ClearFilterButtonVisibility is set to Always. -->
         <Trigger Property="local:FilterCell.ClearFilterButtonVisibility"
                  Value="Always">
            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupByControl
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7GroupByControlTemplate"
                    TargetType="local:GroupByControl">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              ClipToBounds="True">

         <!-- This Grid is used to position the ItemsPresenter over the ContentPresenter in charge
              of displaying the NoGroupContent. -->
         <Grid x:Name="mainGrid">

            <!-- Curly leaves pattern and bubbles -->
            <Viewbox>
               <ContentPresenter ContentTemplate="{StaticResource CurvyLeavesPattern}"
                                 VerticalAlignment="Stretch"
                                 HorizontalAlignment="Stretch" />
            </Viewbox>

            <Grid>
               <ContentControl x:Name="bubble1"
                               VerticalAlignment="Top"
                               HorizontalAlignment="Left"
                               Height="40"
                               Width="40"
                               Focusable="False"
                               RenderTransformOrigin="0.5,0.5"
                               Template="{StaticResource groupByControlBubbleTemplate}">
                  <ContentControl.RenderTransform>
                     <TranslateTransform X="-40" />
                  </ContentControl.RenderTransform>
               </ContentControl>
               <ContentControl x:Name="bubble2"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Width="25"
                               Height="25"
                               Focusable="False"
                               RenderTransformOrigin="0.5,0.5"
                               Template="{StaticResource groupByControlBubbleTemplate}">
                  <ContentControl.RenderTransform>
                     <TranslateTransform X="-25" />
                  </ContentControl.RenderTransform>
               </ContentControl>
               <ContentControl x:Name="bubble3"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Width="15"
                               Height="15"
                               Focusable="False"
                               RenderTransformOrigin="0.5,0.5"
                               Template="{StaticResource groupByControlBubbleTemplate}">
                  <ContentControl.RenderTransform>
                     <TranslateTransform X="-15" />
                  </ContentControl.RenderTransform>
               </ContentControl>
            </Grid>

            <!-- This ContentPresenter displays the value of the NoGroupContent property
                 of the GroupByControl. This content must only be displayed when there are
                 no groups present, so we set its Visibility to Collapsed by default and
                 it is made visible via a trigger. -->
            <ContentPresenter x:Name="noGroupContentPresenter"
                              Content="{TemplateBinding NoGroupContent}"
                              VerticalAlignment="Center"
                              Visibility="Collapsed"
                              Margin="{TemplateBinding Padding}"
                              IsHitTestVisible="False" />

            <!-- The GroupByControl is an ItemsControl, so it must have an ItemsPresenter in its
                 Template in order to layout and show its child items. The default ItemsPanel
                 of the GroupByControl is a "StaircasePanel", which layout its items in a
                 staircase-like pattern and draws connecting lines between the items. -->
            <ItemsPresenter Margin="{TemplateBinding Padding}" />

         </Grid>
      </Border>

      <ControlTemplate.Triggers>

         <!-- When there are no groups, make the NoGroupContent visible. -->
         <Trigger Property="HasItems"
                  Value="False">

            <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>

         <!-- Bubbles Animation -->
         <EventTrigger SourceName="mainGrid"
                       RoutedEvent="Grid.Loaded">
            <EventTrigger.Actions>
               <BeginStoryboard>
                  <Storyboard Duration="00:02:30"
                              RepeatBehavior="Forever"
                              Timeline.DesiredFrameRate="30">
                     <DoubleAnimationUsingPath BeginTime="00:00:00"
                                               Duration="00:001:15"
                                               Storyboard.TargetName="bubble1"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                               Source="X">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-31,11 C-31,11 82.462368,65.802014 130.5,49.5 178.53763,33.197986 204.06968,7.4634866 267.5,6.5 334.55253,5.4814933 418.45061,50.4996 481.5,50.5 537.08628,50.500353 649.57165,18.872376 721.5,14.5 855.60506,6.3480301 970.42944,34.5 1060.5,34.5 1120.0867,34.5 1256.5,-19.5 1256.5,-19.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimationUsingPath BeginTime="00:00:00"
                                               Duration="00:01:15"
                                               Storyboard.TargetName="bubble1"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                               Source="Y">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-31,11 C-31,11 82.462368,65.802014 130.5,49.5 178.53763,33.197986 204.06968,7.4634866 267.5,6.5 334.55253,5.4814933 418.45061,50.4996 481.5,50.5 537.08628,50.500353 649.57165,18.872376 721.5,14.5 855.60506,6.3480301 970.42944,34.5 1060.5,34.5 1120.0867,34.5 1256.5,-19.5 1256.5,-19.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimation BeginTime="00:01:00"
                                      Duration="00:00:15"
                                      Storyboard.TargetName="bubble1"
                                      Storyboard.TargetProperty="(UIElement.Opacity)"
                                      From="1"
                                      To="0" />
                     <DoubleAnimationUsingPath BeginTime="00:00:15"
                                               Duration="00:01:15"
                                               Storyboard.TargetName="bubble2"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                               Source="X">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-14.5,51.5 C-14.5,51.5 166.5,8.5 218.5,42.5 270.5,76.5 323.29493,96.682289 372.29493,84.682289 421.29493,72.682289 496.29493,22.682289 537.29493,27.682289 578.29493,32.682289 641.5,55.5 677.5,58.5 713.5,61.5 757.5,36.5 789.5,27.5 821.5,18.5 882.5,44.5 928.5,56.5 974.5,68.5 1042.5,49.5 1074.5,33.5 1106.5,17.5 1161.5,25.5&#xd;&#xa;1185.5,43.5 1209.5,61.5 1271.5,45.5 1271.5,45.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimationUsingPath BeginTime="00:00:15"
                                               Duration="00:01:15"
                                               Storyboard.TargetName="bubble2"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                               Source="Y">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-14.5,51.5 C-14.5,51.5 166.5,8.5 218.5,42.5 270.5,76.5 323.29493,96.682289 372.29493,84.682289 421.29493,72.682289 496.29493,22.682289 537.29493,27.682289 578.29493,32.682289 641.5,55.5 677.5,58.5 713.5,61.5 757.5,36.5 789.5,27.5 821.5,18.5 882.5,44.5 928.5,56.5 974.5,68.5 1042.5,49.5 1074.5,33.5 1106.5,17.5 1161.5,25.5&#xd;&#xa;1185.5,43.5 1209.5,61.5 1271.5,45.5 1271.5,45.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimation BeginTime="00:01:15"
                                      Duration="00:00:15"
                                      Storyboard.TargetName="bubble2"
                                      Storyboard.TargetProperty="(UIElement.Opacity)"
                                      From="1"
                                      To="0" />
                     <DoubleAnimationUsingPath BeginTime="00:00:06"
                                               Duration="00:01:03"
                                               Storyboard.TargetName="bubble3"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                               Source="X">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-14.5,36.5 C-14.5,36.5 69.5,-4.4998449 121.5,29.500155 173.5,63.500155 250.5,72.500155 299.5,60.500155 348.5,48.500155 418.5,7.5001551 459.5,12.500155 500.5,17.500155 549.32936,71.672597 585.32936,74.672597 621.32936,77.672597 696.5,38.5 728.5,29.5 760.5,20.5 876.5,42.5 922.5,54.5 968.5,66.5 1031.5,35.5 1063.5,19.5 1095.5,3.5 1142.5,41.5&#xd;&#xa;1175.5,42.5 1205.4862,43.408674 1283.5,15.5 1283.5,15.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimationUsingPath BeginTime="00:00:06"
                                               Duration="00:01:03"
                                               Storyboard.TargetName="bubble3"
                                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                               Source="Y">
                        <DoubleAnimationUsingPath.PathGeometry>
                           <PathGeometry Figures="M-14.5,36.5 C-14.5,36.5 69.5,-4.4998449 121.5,29.500155 173.5,63.500155 250.5,72.500155 299.5,60.500155 348.5,48.500155 418.5,7.5001551 459.5,12.500155 500.5,17.500155 549.32936,71.672597 585.32936,74.672597 621.32936,77.672597 696.5,38.5 728.5,29.5 760.5,20.5 876.5,42.5 922.5,54.5 968.5,66.5 1031.5,35.5 1063.5,19.5 1095.5,3.5 1142.5,41.5&#xd;&#xa;1175.5,42.5 1205.4862,43.408674 1283.5,15.5 1283.5,15.5" />
                        </DoubleAnimationUsingPath.PathGeometry>
                     </DoubleAnimationUsingPath>
                     <DoubleAnimation BeginTime="00:00:54"
                                      Duration="00:00:15"
                                      Storyboard.TargetName="bubble3"
                                      Storyboard.TargetProperty="(UIElement.Opacity)"
                                      From="1"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>
            </EventTrigger.Actions>
         </EventTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupByItem
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7GroupByItemTemplate"
                    TargetType="local:GroupByItem">

      <Grid>

         <Border x:Name="mouseOverEffect"
                 Opacity="0"
                 CornerRadius="5"
                 Background="{StaticResource groupByItemMouseOverBackgroundBrush}" />

         <Border x:Name="mainBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}"
                 CornerRadius="5">

            <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
            <StackPanel Orientation="Horizontal">

               <!-- Same ContentPresenter as in the base Cell Template. -->
               <ContentPresenter Content="{TemplateBinding Content}"
                                 ContentTemplate="{TemplateBinding ContentTemplate}"
                                 ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 Margin="0,4" />

               <!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
               <ContentPresenter x:Name="sortGlyphPresenter"
                                 Content="{x:Null}"
                                 ContentTemplate="{x:Null}"
                                 Margin="15,0,0,0"
                                 TextBlock.Foreground="Black" />

            </StackPanel>
         </Border>

         <Border x:Name="blackBorder"
                 BorderThickness="1"
                 BorderBrush="{StaticResource basicBlackBorderBrush}"
                 CornerRadius="5">
            <Border x:Name="whiteBorder"
                    BorderThickness="1"
                    BorderBrush="{StaticResource basicWhiteBorderBrush}"
                    CornerRadius="4" />
         </Border>

      </Grid>

      <ControlTemplate.Triggers>

         <Trigger Property="IsMouseOver"
                  Value="true">
            <Setter TargetName="mouseOverEffect"
                    Property="Opacity"
                    Value="1" />
         </Trigger>

         <Trigger Property="IsPressed"
                  Value="true">
            <Setter TargetName="mainBorder"
                    Property="Background"
                    Value="{StaticResource groupByItemPressedBackgroundBrush}" />
         </Trigger>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupHeaderControl
    ************************** -->
   <ControlTemplate x:Key="compactCardViewWindows7GroupHeaderControlTemplate"
                    TargetType="local:GroupHeaderControl">

      <!-- We use an ItemsControl inside the GroupHeaderControl to represent the
           ancestors (ParentGroups) of the Group, and each item in this ItemsControl
           is a Group templated to look like a single, stand-alone GroupHeaderControl. -->

      <ControlTemplate.Resources>

         <DataTemplate x:Key="parentGroupItemTemplate">

            <Grid Margin="0,0,0,1"
                  local:GroupLevelIndicatorPane.ShowIndicators="False"
                  local:GroupLevelIndicatorPane.ShowVerticalBorder="False"
                  local:GroupLevelIndicatorPane.GroupLevel="{Binding Path=Level}">

               <Border Background="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=Background}"
                       BorderBrush="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderBrush}"
                       BorderThickness="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderThickness}"
                       Opacity="{Binding Path=Level, Converter={StaticResource levelToOpacityConverter}, ConverterParameter=0.20}" />

               <!-- This Border is Focusable to make the InputBindings work. -->
               <Border BorderThickness="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderThickness}"
                       Padding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=Padding}"
                       Background="Transparent"
                       Focusable="True"
                       FocusVisualStyle="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=FocusVisualStyle}">

                  <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
                  <Border.InputBindings>

                     <KeyBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                 Key="Space" />

                     <MouseBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                   MouseAction="LeftDoubleClick" />

                  </Border.InputBindings>

                  <DockPanel VerticalAlignment="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=VerticalContentAlignment}">
                     <Border DockPanel.Dock="Left"
                             BorderThickness="0,0,1,1"
                             CornerRadius="3">
                        <Border.BorderBrush>
                           <RadialGradientBrush Center="1,3.5"
                                                GradientOrigin="1,0.5"
                                                RadiusX="2"
                                                RadiusY="3">
                              <GradientStop Color="#0004A2F7"
                                            Offset="1" />
                              <GradientStop Color="#FF013C98"
                                            Offset="0" />
                           </RadialGradientBrush>
                        </Border.BorderBrush>

                        <StackPanel Orientation="Horizontal"
                                    Margin="0,0,4,1">

                           <local:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                                          Indented="False" />

                           <!-- ToggleButton that is used to expand/collapse the group. -->
                           <ToggleButton DockPanel.Dock="Left"
                                         Focusable="False"
                                         OverridesDefaultStyle="True"
                                         Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                         IsChecked="{Binding IsExpanded}" />

                           <ContentPresenter Margin="3,0,0,0"
                                             TextElement.FontSize="9"
                                             Content="{Binding}"
                                             ContentTemplate="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=ContentTemplate}"
                                             ContentTemplateSelector="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=ContentTemplateSelector}"
                                             HorizontalAlignment="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=HorizontalContentAlignment}" />

                        </StackPanel>
                     </Border>
                     <Rectangle Height="1"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True">
                        <Rectangle.Stroke>
                           <LinearGradientBrush EndPoint="1,0.5"
                                                StartPoint="0,0.5">
                              <GradientStop Color="#FF013C98"
                                            Offset="0" />
                              <GradientStop Color="#0004A2F7"
                                            Offset="1" />
                           </LinearGradientBrush>
                        </Rectangle.Stroke>
                     </Rectangle>
                  </DockPanel>
               </Border>
            </Grid>

         </DataTemplate>

      </ControlTemplate.Resources>

      <Border x:Name="mainBorder">

         <StackPanel Orientation="Vertical">

            <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Content.ParentGroups}"
                          Focusable="False"
                          ItemTemplate="{StaticResource parentGroupItemTemplate}" />

            <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{StaticResource parentGroupItemTemplate}"
                              HorizontalAlignment="Stretch" />

         </StackPanel>
      </Border>

      <ControlTemplate.Triggers>
         <Trigger Property="local:DataGridControl.NavigationBehavior"
                  Value="None">
            <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False" />
         </Trigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
   <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

      <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

         <Grid Width="20"
               Background="Transparent"
               HorizontalAlignment="Center">

            <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}" />

            <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

            </ContentPresenter>
         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

            <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}" />

         </DataTrigger>

         <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
   <conv:IntAdditionConverter x:Key="IntAdditionConverter" />
   <conv:SortingDirectionToBooleanConverter x:Key="SortingDirectionToBooleanConverter" />
   
   <ControlTemplate x:Key="compactCardViewWindows7ColumnManagerCellTemplate"
                    TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
         </Style>
      </ControlTemplate.Resources>

      <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

         <!-- This Grid is used to layout the ContentPresenter and the Sort Glyph (when present). -->
         <Grid>
            <Grid.ColumnDefinitions>
               <ColumnDefinition Width="Auto" />
               <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Border x:Name="toggleButtonBorder"
                    Grid.Column="0"
                    Background="Transparent"
                    Margin="0,0,0,0"
                    IsHitTestVisible="True">
               <ToggleButton x:Name="toggleButton"
                             TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
                             Focusable="False"
                             Visibility="Hidden"
                             Margin="0,0,0,0" />
            </Border>

            <local:AutoFilterPopup x:Name="filterOptions"
                                   PopupAnimation="Slide"
                                   StaysOpen="False"
                                   AllowsTransparency="True"
                                   PlacementTarget="{Binding ElementName=toggleButton}">

               <local:AutoFilterControl x:Name="autoFilterControl"
                                        AutoFilterColumn="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn}"
                                        Style="{Binding RelativeSource={RelativeSource self}, Path=(local:Cell.ParentCell).ParentColumn.AutoFilterControlStyle}" />
            </local:AutoFilterPopup>

            <Grid x:Name="cellPartGrid"
                  Grid.Column="1">

               <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition />
               </Grid.ColumnDefinitions>

               <Border x:Name="separationLine"
                       Width="1"
                       Background="White"
                       Margin="0,0,0,0"
                       HorizontalAlignment="Left"
                       Grid.Column="0" />

               <Border x:Name="cellBorder"
                       HorizontalAlignment="Stretch"
                       Grid.Column="1"
                       Padding="{TemplateBinding Padding}"
                       Background="{TemplateBinding Background}">

                  <Grid>
                     <Border x:Name="cellHighlight"
                             Background="{StaticResource highlightBackgroundBrush}"
                             Opacity="0" />

                     <StackPanel Orientation="Horizontal">

                        <!-- Same ContentPresenter as in the base Cell Template. -->
                        <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Margin="3,0,0,0" />

                        <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitely set its Content property to Null to prevent the XAML parser
                          from implicitely setting it to its TemplatedParent's Content. -->
                        <ContentPresenter x:Name="sortGlyphPresenter"
                                          Content="{x:Null}"
                                          ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                          Margin="6,0,0,0"
                                          Visibility="Hidden" />
                        <ContentPresenter x:Name="sortIndexGlyphPresenter"
                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                          Content="{Binding Path=(local:Cell.ParentCell).ParentColumn.SortIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource IntAdditionConverter}, ConverterParameter=1}"
                                          ContentTemplate="{x:Null}"
                                          Margin="3,0,0,0"
                                          Visibility="Collapsed" />

                     </StackPanel>
                  </Grid>
               </Border>
            </Grid>
         </Grid>
      </Border>

      <ControlTemplate.Triggers>
         <!-- Trigger related to the filteringToggleButton-->
         <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="toggleButtonBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

         </Trigger>

         <!-- Always visible if filterOptions popup IsOpen -->
         <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

            <Setter TargetName="toggleButtonBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

         </Trigger>

         <!-- Display FilterToggleButton Trigger on MouseOver -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

         </MultiDataTrigger>

         <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

         </MultiDataTrigger>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

         </DataTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
               <Condition Binding="{Binding Path=ParentColumn.SortDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource SortingDirectionToBooleanConverter}}"
                          Value="True" />
               <Condition Binding="{Binding Path=(local:DataGridControl.DataGridContext).ShowSortIndex, RelativeSource={RelativeSource Self}}"
                          Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />
            <Setter TargetName="sortIndexGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SortIndexGlyph}" />
         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </DataTrigger>

         <Trigger SourceName="cellPartGrid"
                  Property="IsMouseOver"
                  Value="True">

            <Trigger.EnterActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.2"
                                      To="1" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.EnterActions>

            <Trigger.ExitActions>
               <BeginStoryboard>
                  <Storyboard>
                     <DoubleAnimation Storyboard.TargetName="cellHighlight"
                                      Storyboard.TargetProperty="Opacity"
                                      BeginTime="00:00:00"
                                      Duration="00:00:00.5"
                                      To="0" />
                  </Storyboard>
               </BeginStoryboard>
            </Trigger.ExitActions>
         </Trigger>

         <Trigger SourceName="toggleButton"
                  Property="IsPressed"
                  Value="True">

            <Setter TargetName="toggleButtonBorder"
                    Property="Background"
                    Value="{StaticResource groupByItemBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsBeingDragged"
                  Value="True">

            <Setter TargetName="cellBorder"
                    Property="Background"
                    Value="{StaticResource groupByItemBackgroundBrush}" />

            <Setter TargetName="toggleButtonBorder"
                    Property="Visibility"
                    Value="Hidden" />

         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: AutoFilterControl
    ************************** -->
   <Style x:Key="ListBoxStyle"
          TargetType="{x:Type ListBox}"
          BasedOn="{StaticResource {x:Type ListBox}}" />
   
   <ControlTemplate x:Key="compactCardViewWindows7AutoFilterControlTemplate"
                    TargetType="local:AutoFilterControl">
      <Border x:Name="autoFilterControlBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              CornerRadius="4">
         <Grid>
            <Grid.RowDefinitions>
               <RowDefinition Height="Auto" />
               <RowDefinition Height="Auto" />
               <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Button DockPanel.Dock="Top"
                    Grid.Row="0"
                    MinHeight="24"
                    Background="{TemplateBinding Background}"
                    Foreground="Black"
                    Content="{TemplateBinding ClearAutoFilterText}"
                    Command="local:AutoFilterControl.ClearAutoFilterValues" />

            <Button DockPanel.Dock="Top"
                    Grid.Row="1"
                    MinHeight="24"
                    Background="{TemplateBinding Background}"
                    Foreground="Black"
                    Content="{TemplateBinding SelectAllAutoFilterText}"
                    Command="local:AutoFilterControl.SelectAllAutoFilterValues" />

            <!-- ItemsSource will be set in OnApplyTemplate of AutoFilterControl because the DataGridContext does not
             redirects automatically to the DataGridCollectionView for the Master level -->
            <ListBox x:Name="PART_DistinctValuesHost"
                     Grid.Row="2"
                     MaxHeight="350"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     Background="{TemplateBinding Background}"
                     Foreground="{TemplateBinding Foreground}"
                     BorderThickness="0"
                     ItemTemplate="{TemplateBinding DistinctValueItemTemplate}"
                     ItemContainerStyle="{TemplateBinding DistinctValueItemContainerStyle}"
                     SelectionMode="Multiple"
                     Style="{StaticResource ListBoxStyle}">
               <ListBox.Resources>
                  <Style TargetType="{x:Type ScrollViewer}"
                         BasedOn="{StaticResource {x:Type ScrollViewer}}" />
               </ListBox.Resources>
            </ListBox>
         </Grid>
      </Border>

      <!--# case 155953: We do not want a property and its selector do be set to prevent warnings. -->
      <ControlTemplate.Triggers>
         <DataTrigger Binding="{Binding Path=ItemTemplate, ElementName=PART_DistinctValuesHost, Converter={StaticResource nullToBooleanConverter}}"
                      Value="True">
            <Setter TargetName="PART_DistinctValuesHost"
                    Property="ItemTemplateSelector"
                    Value="{Binding Path=DistinctValueItemTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
         </DataTrigger>

         <DataTrigger Binding="{Binding Path=ItemContainerStyle, ElementName=PART_DistinctValuesHost, Converter={StaticResource nullToBooleanConverter}}"
                      Value="True">
            <Setter TargetName="PART_DistinctValuesHost"
                    Property="ItemContainerStyleSelector"
                    Value="{Binding Path=DistinctValueItemContainerStyleSelector, RelativeSource={RelativeSource TemplatedParent}}" />
         </DataTrigger>
      </ControlTemplate.Triggers>
      
   </ControlTemplate>

   <!-- =================================================================== -->
   <!-- Styles required by some grid elements                               -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
   <Style x:Key="cellErrorStyle"
          TargetType="local:Cell">

      <Setter Property="Background"
              Value="{StaticResource errorBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource errorForegroundBrush}" />

      <Setter Property="ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}" />
      <Style.Triggers>
         <Trigger Property="IsValidationErrorRestrictive"
                  Value="True">
            <Setter Property="Background"
                    Value="{StaticResource errorBackgroundBrush}" />

         </Trigger>

         <Trigger Property="IsValidationErrorRestrictive"
                  Value="False">

            <Setter Property="Foreground"
                    Value="{StaticResource warningForegroundBrush}" />

            <Setter Property="Background"
                    Value="{StaticResource warningBackgroundBrush}" />

         </Trigger>
      </Style.Triggers>
   </Style>

   <!-- =================================================================== -->
   <!-- Keyed Styles of grid elements                                       -->
   <!-- =================================================================== -->

   <!--**************************
    * STYLE: DataGridControl 
    ************************** -->
   <Style x:Key="compactCardViewWindows7GridControlStyle"
          TargetType="local:DataGridControl">

      <Style.Resources>
         <markup:DataGridThemeResourceDictionary Source="Resources/Windows7.Controls.xaml" />
      </Style.Resources>

      <Setter Property="BorderBrush"
              Value="{StaticResource gridControlBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Background"
              Value="{StaticResource dataGridControlBackground}" />

      <Setter Property="Foreground"
              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

      <!-- In CardView, it is more convenient to use Row/Explicit navigation than Cell navigation. -->
      <Setter Property="NavigationBehavior"
              Value="RowOrCell" />

      <!-- For the horizontal scrolling of the CompactCardView, PagingBehavior.LeftToRight is better suited 
           than the default TopToBottom. -->
      <Setter Property="PagingBehavior"
              Value="LeftToRight" />

      <!-- This is required to display gridlines of uniform thickness -->
      <Setter Property="SnapsToDevicePixels"
              Value="True" />

      <Setter Property="CellErrorStyle"
              Value="{StaticResource cellErrorStyle}" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7DataGridControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: Row Style
    ************************** -->
   <Style x:Key="compactCardViewWindows7RowStyle"
          TargetType="local:Row">

      <Setter Property="SelectionBackground"
              Value="{StaticResource selectionBackgroundBrush}" />

      <Setter Property="SelectionForeground"
              Value="{StaticResource selectionForegroundBrush}" />

      <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionBackgroundBrush}" />

      <Setter Property="InactiveSelectionForeground"
              Value="{StaticResource inactiveSelectionForegroundBrush}" />

      <Setter Property="Margin"
              Value="5,0,5,5" />

      <Setter Property="BorderBrush"
              Value="{StaticResource cardBorderBrush}" />

      <!-- Set the Row's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying DataGridControl. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7RowTemplate}" />
   </Style>

   <!--**************************
    * STYLE: DataRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7DataRowStyle"
          TargetType="local:DataRow"
          BasedOn="{StaticResource compactCardViewWindows7RowStyle}">

   </Style>

   <!--**************************
    * STYLE: InsertionRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7InsertionRowStyle"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource compactCardViewWindows7DataRowStyle}">

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7InsertionRowTemplate}" />

   </Style>

   <!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7ColumnManagerRowStyle"
          TargetType="local:ColumnManagerRow">

      <Setter Property="Background"
              Value="#FF014EB1" />

      <Setter Property="Foreground"
              Value="White" />

      <Setter Property="BorderBrush"
              Value="White" />

      <Setter Property="BorderThickness"
              Value="1,0,0,0" />

      <Setter Property="views:UIViewBase.DropMarkOrientation"
              Value="Horizontal" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewColumnManagerRowTemplate}" />

   </Style>

   <!--**************************
    * STYLE: StatRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7StatRowStyle"
          TargetType="local:StatRow"
          BasedOn="{StaticResource compactCardViewWindows7RowStyle}">

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7StatRowTemplate}" />

   </Style>

   <!--**************************
    * STYLE: FilterRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7FilterRowStyle"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource compactCardViewWindows7RowStyle}">

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7FilterRowTemplate}" />

   </Style>

   <!--**************************
    * STYLE: FlexibleRow 
    ************************** -->
   <Style x:Key="compactCardViewWindows7FlexibleRowStyle"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource compactCardViewWindows7RowStyle}" />

   <!--**************************
    * STYLE: Cell Style
    ************************** -->
   <Style x:Key="compactCardViewWindows7CellStyle"
          TargetType="local:Cell">

      <Setter Property="CurrentBackground"
              Value="{StaticResource rowTitleBackgroundBrush}" />

      <Setter Property="CurrentForeground"
              Value="White" />

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <!--# case 150388: The foreground property set in a user implicit style may not always be applied.  We noticed that
                         the issue doesn't occur when we assign a value for the foreground property in the default style.
                         Since we don't want to stop an inherited value to be propagated, we bind the property to the
                         parent's property. -->
      <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentForeground}" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- A Windows7 Cell Template requires at least a ContentPresenter that is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border who is responsible for painting the gridlines. -->
      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7CellTemplate}" />

   </Style>

   <!--**************************
    * STYLE: DataCell
    ************************** -->
   <Style x:Key="compactCardViewWindows7DataCellStyle"
          TargetType="local:DataCell"
          BasedOn="{StaticResource compactCardViewWindows7CellStyle}">

      <Style.Triggers>

         <MultiDataTrigger>

            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.IsBeingEdited}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </MultiDataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: InsertionCell
   ************************** -->
   <Style x:Key="compactCardViewWindows7InsertionCellStyle"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource compactCardViewWindows7CellStyle}" />

   <!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
   <Style x:Key="compactCardViewWindows7ColumnManagerCellStyle"
          TargetType="local:ColumnManagerCell">

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="Padding"
              Value="2,0" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- We don't use the base Cell Template for the ColumnManagerCell because it need more elements
           to function properly, like a glyph that represents the Column's SortDirection. -->
      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7ColumnManagerCellTemplate}" />

      <Style.Triggers>

         <Trigger Property="IsPressed"
                  Value="True">

            <Setter Property="Background"
                    Value="{StaticResource groupByItemBackgroundBrush}" />

         </Trigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: StatCell Style
    ************************** -->
   <Style x:Key="compactCardViewWindows7StatCellStyle"
          TargetType="local:StatCell">

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <!-- A basic Cell Template requires at least a ContentPresenter, which is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border that is responsible for painting the gridlines. -->
      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7StatCellTemplate}" />

      <Style.Triggers>

         <!-- Collapse the cell when HideEmptyCells is true and the StatFunction returns null. -->
         <MultiDataTrigger>

            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </MultiDataTrigger>

         <!-- Collapse the cell when HideEmptyCells is true and no StatFunction is defined for the cell. -->
         <MultiDataTrigger>

            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </MultiDataTrigger>

         <!-- Hide the cell when when HideEmptyCells is false and no StatFunction is defined for the cell. -->
         <MultiDataTrigger>

            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Hidden" />

         </MultiDataTrigger>

      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: FilterCell
    ************************** -->
   <Style x:Key="compactCardViewWindows7FilterCellStyle"
          TargetType="local:FilterCell">
      <Setter Property="CurrentBackground"
              Value="{StaticResource rowTitleBackgroundBrush}" />

      <Setter Property="CurrentForeground"
              Value="White" />

      <Setter Property="HorizontalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellHorizontalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="VerticalContentAlignment"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.CellVerticalContentAlignment, FallbackValue=Stretch}" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7FilterCellTemplate}" />

      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
              Value="Transparent" />
   </Style>

   <!--**************************
    * STYLE: FlexibleCell
    ************************** -->
   <Style x:Key="compactCardViewWindows7FlexibleCellStyle"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource compactCardViewWindows7CellStyle}" >

      <Setter Property="Content"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=DefaultContent}" />

   </Style>

   <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
   <Style x:Key="compactCardViewWindows7GroupByControlStyle"
          TargetType="local:GroupByControl">

      <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical CardView, a height of at least 50 is appropriate for the GroupByControl. -->
      <Setter Property="MinHeight"
              Value="50" />

      <Setter Property="ConnectionLinePen"
              Value="{StaticResource groupByConnectionLinePen}" />

      <Setter Property="Background"
              Value="{StaticResource groupByControlBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="{StaticResource groupByControlForegroundBrush}" />

      <Setter Property="Padding"
              Value="8" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7GroupByControlTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupByItem
    ************************** -->
   <Style x:Key="compactCardViewWindows7GroupByItemStyle"
          TargetType="local:GroupByItem">

      <Setter Property="Background"
              Value="{StaticResource groupByItemBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="Black" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="BorderBrush"
              Value="{StaticResource groupByItemBorderBrush}" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7GroupByItemTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupHeaderControl
    ************************** -->
   <Style x:Key="compactCardViewWindows7GroupHeaderControlStyle"
          TargetType="local:GroupHeaderControl">

      <Setter Property="Background"
              Value="Transparent" />

      <Setter Property="Foreground"
              Value="Black" />

      <Setter Property="Margin"
              Value="5,0,5,5" />

      <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

      <Setter Property="VerticalContentAlignment"
              Value="Center" />

      <!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it is holding the various InputBindings that make the
           GroupHeaderControl work. -->
      <Setter Property="Focusable"
              Value="False" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7GroupHeaderControlTemplate}" />

      <Style.Triggers>
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsBottomLevel}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsExpanded}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed" />

         </MultiDataTrigger>
      </Style.Triggers>

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
   <Style x:Key="compactCardViewWindows7GroupLevelIndicatorStyle"
          TargetType="local:GroupLevelIndicator">

      <Setter Property="Width"
              Value="12" />

   </Style>

   <!--**************************
    * STYLE: DetailIndicator
    ************************** -->
   <Style x:Key="compactCardViewWindows7DetailIndicatorStyle"
          TargetType="local:DetailIndicator">

      <Setter Property="Width"
              Value="12" />

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="compactCardViewWindows7GroupLevelIndicatorPaneStyle"
          TargetType="local:GroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource compactCardViewGroupLevelIndicatorPaneTemplate}" />

   </Style>

   <!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
   <Style x:Key="compactCardViewWindows7HierarchicalGroupLevelIndicatorPaneStyle"
          TargetType="local:HierarchicalGroupLevelIndicatorPane">

      <Setter Property="Template"
              Value="{StaticResource compactCardViewHierarchicalGroupLevelIndicatorPaneTemplate}" />

   </Style>

   <!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
   <Style x:Key="compactCardViewWindows7AutoFilterControlStyle"
          TargetType="local:AutoFilterControl">
      <Setter Property="Width"
              Value="200" />

      <Setter Property="BorderThickness"
              Value="1" />

      <Setter Property="BorderBrush"
              Value="Black" />

      <Setter Property="Background"
              Value="{StaticResource columnChooserBackgroundBrush}" />

      <Setter Property="Foreground"
              Value="White" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewWindows7AutoFilterControlTemplate}" />

      <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
   </Style>

   <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
   <Style x:Key="compactCardViewWindows7ColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
      <Setter Property="OverridesDefaultStyle"
              Value="True" />
      <Setter Property="IsCheckable"
              Value="True" />
      <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
      <Setter Property="StaysOpenOnClick"
              Value="True" />
      <Setter Property="Template"
              Value="{StaticResource Windows7MenuItem}" />
      <Setter Property="Foreground"
              Value="White" />
   </Style>

   <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
   <Style x:Key="compactCardViewWindows7ColumnChooserContextMenuStyle"
          TargetType="{x:Type local:ColumnChooserContextMenu}">
      <Setter Property="ItemContainerStyle"
              Value="{StaticResource compactCardViewWindows7ColumnChooserContextMenuMenuItemStyle}" />
      <Setter Property="DisplayMemberPath"
              Value="Title" />
      <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
      <Setter Property="Background"
              Value="{StaticResource columnChooserBackgroundBrush}" />
      <Setter Property="Template"
              Value="{StaticResource Windows7ContextMenuTemplate}" />
   </Style>

   <!--**************************
    * STYLE: ScrollTip
    ************************** -->
   <Style x:Key="compactCardViewWindows7ScrollTipStyle"
          TargetType="local:ScrollTip">

      <Setter Property="Template"
              Value="{StaticResource scrollTipTemplate}" />

      <Setter Property="Background">
         <Setter.Value>
            <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
               <GradientStop Color="#FF56D0F9"
                             Offset="0" />
               <GradientStop Offset="0.53" />
               <GradientStop Color="#FF56D0F9"
                             Offset="0.987" />
            </LinearGradientBrush>
         </Setter.Value>
      </Setter>

      <Setter Property="BorderBrush"
              Value="Transparent" />

      <Setter Property="TextElement.Foreground"
              Value="Black" />

      <Setter Property="VerticalAlignment"
              Value="Bottom" />

      <Setter Property="HorizontalAlignment"
              Value="Center" />

   </Style>

   <!--**************************
    * STYLE: ColumnChooserControl 
    ************************** -->
   <Style x:Key="compactCardViewWindows7ColumnChooserControlStyle"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource Windows7ColumnChooserControlStyle}" />

   <!-- =================================================================== -->
   <!-- Default values for the View                                         -->
   <!-- =================================================================== -->

   <Style x:Key="compactCardViewWindows7DefaultValues"
          TargetType="views:CompactCardView">

      <Setter Property="DefaultDropMarkPen"
              Value="{StaticResource dropMarkPen}" />

      <Setter Property="SeparatorLinePen"
              Value="{StaticResource cardSeparatorLinePen}" />

      <Setter Property="CardWidth"
              Value="250" />

      <Setter Property="CardTitleBackground"
              Value="Transparent" />

      <Setter Property="CardTitleForeground"
              Value="White" />

      <Setter Property="AutoFilterDropDownGlyph"
              Value="{StaticResource autoFilterDropDownGlyph}" />

      <Setter Property="AutoFilterGlyph"
              Value="{StaticResource autoFilterGlyph}" />

      <!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

      <Setter Property="AscendingSortGlyph"
              Value="{StaticResource ascendingSortGlyph}" />

      <Setter Property="DescendingSortGlyph"
              Value="{StaticResource descendingSortGlyph}" />

      <Setter Property="SortIndexGlyph"
              Value="{StaticResource sortIndexGlyph}" />

      <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />

      <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />

      <Setter Property="CurrentItemGlyph"
              Value="{StaticResource currentItemGlyph}" />

      <Setter Property="EditingRowGlyph"
              Value="{StaticResource editingRowGlyph}" />

      <Setter Property="ValidationErrorGlyph"
              Value="{StaticResource validationErrorGlyph}" />

      <Setter Property="InsertionRowGlyph"
              Value="{StaticResource insertionRowGlyph}" />

      <Setter Property="FilterRowGlyph"
              Value="{StaticResource filterRowGlyph}" />

      <Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />

      <Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

      <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}" />

   </Style>

   <!-- =================================================================== -->
   <!-- DefaultStyleKey declarations                                        -->
   <!-- =================================================================== -->

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme}"
          TargetType="views:CompactCardView"
          BasedOn="{StaticResource compactCardViewWindows7DefaultValues}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:DataGridControl}"
          TargetType="local:DataGridControl"
          BasedOn="{StaticResource compactCardViewWindows7GridControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:Row}"
          TargetType="local:Row"
          BasedOn="{StaticResource compactCardViewWindows7RowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:DataRow}"
          TargetType="local:DataRow"
          BasedOn="{StaticResource compactCardViewWindows7DataRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:InsertionRow}"
          TargetType="local:InsertionRow"
          BasedOn="{StaticResource compactCardViewWindows7InsertionRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:ColumnManagerRow}"
          TargetType="local:ColumnManagerRow"
          BasedOn="{StaticResource compactCardViewWindows7ColumnManagerRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:StatRow}"
          TargetType="local:StatRow"
          BasedOn="{StaticResource compactCardViewWindows7StatRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:FilterRow}"
          TargetType="local:FilterRow"
          BasedOn="{StaticResource compactCardViewWindows7FilterRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:FlexibleRow}"
          TargetType="local:FlexibleRow"
          BasedOn="{StaticResource compactCardViewWindows7FlexibleRowStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:Cell}"
          TargetType="local:Cell"
          BasedOn="{StaticResource compactCardViewWindows7CellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:DataCell}"
          TargetType="local:DataCell"
          BasedOn="{StaticResource compactCardViewWindows7DataCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:InsertionCell}"
          TargetType="local:InsertionCell"
          BasedOn="{StaticResource compactCardViewWindows7InsertionCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:ColumnManagerCell}"
          TargetType="local:ColumnManagerCell"
          BasedOn="{StaticResource compactCardViewWindows7ColumnManagerCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:StatCell}"
          TargetType="local:StatCell"
          BasedOn="{StaticResource compactCardViewWindows7StatCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:FilterCell}"
          TargetType="local:FilterCell"
          BasedOn="{StaticResource compactCardViewWindows7FilterCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:FlexibleCell}"
          TargetType="local:FlexibleCell"
          BasedOn="{StaticResource compactCardViewWindows7FlexibleCellStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:GroupByControl}"
          TargetType="local:GroupByControl"
          BasedOn="{StaticResource compactCardViewWindows7GroupByControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:GroupByItem}"
          TargetType="local:GroupByItem"
          BasedOn="{StaticResource compactCardViewWindows7GroupByItemStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:GroupHeaderControl}"
          TargetType="local:GroupHeaderControl"
          BasedOn="{StaticResource compactCardViewWindows7GroupHeaderControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:GroupLevelIndicator}"
          TargetType="local:GroupLevelIndicator"
          BasedOn="{StaticResource compactCardViewWindows7GroupLevelIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:DetailIndicator}"
          TargetType="local:DetailIndicator"
          BasedOn="{StaticResource compactCardViewWindows7DetailIndicatorStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:GroupLevelIndicatorPane}"
          TargetType="local:GroupLevelIndicatorPane"
          BasedOn="{StaticResource compactCardViewWindows7GroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:HierarchicalGroupLevelIndicatorPane}"
          TargetType="local:HierarchicalGroupLevelIndicatorPane"
          BasedOn="{StaticResource compactCardViewWindows7HierarchicalGroupLevelIndicatorPaneStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:AutoFilterControl}"
          TargetType="local:AutoFilterControl"
          BasedOn="{StaticResource compactCardViewWindows7AutoFilterControlStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:ScrollTip}"
          TargetType="local:ScrollTip"
          BasedOn="{StaticResource compactCardViewWindows7ScrollTipStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:ColumnChooserContextMenu}"
          TargetType="local:ColumnChooserContextMenu"
          BasedOn="{StaticResource compactCardViewWindows7ColumnChooserContextMenuStyle}" />

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:Windows7Theme, TargetElementType=local:ColumnChooserControl}"
          TargetType="local:ColumnChooserControl"
          BasedOn="{StaticResource compactCardViewWindows7ColumnChooserControlStyle}" />

</ResourceDictionary>
